//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HA.MVVMClient.DataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attendance", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Attendance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SapNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkerStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkerStateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkerTourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkerTourIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateID {
            get {
                return this.DateIDField;
            }
            set {
                if ((this.DateIDField.Equals(value) != true)) {
                    this.DateIDField = value;
                    this.RaisePropertyChanged("DateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SapNumber {
            get {
                return this.SapNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SapNumberField, value) != true)) {
                    this.SapNumberField = value;
                    this.RaisePropertyChanged("SapNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkerID {
            get {
                return this.WorkerIDField;
            }
            set {
                if ((this.WorkerIDField.Equals(value) != true)) {
                    this.WorkerIDField = value;
                    this.RaisePropertyChanged("WorkerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkerState {
            get {
                return this.WorkerStateField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkerStateField, value) != true)) {
                    this.WorkerStateField = value;
                    this.RaisePropertyChanged("WorkerState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkerStateID {
            get {
                return this.WorkerStateIDField;
            }
            set {
                if ((this.WorkerStateIDField.Equals(value) != true)) {
                    this.WorkerStateIDField = value;
                    this.RaisePropertyChanged("WorkerStateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkerTour {
            get {
                return this.WorkerTourField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkerTourField, value) != true)) {
                    this.WorkerTourField = value;
                    this.RaisePropertyChanged("WorkerTour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkerTourID {
            get {
                return this.WorkerTourIDField;
            }
            set {
                if ((this.WorkerTourIDField.Equals(value) != true)) {
                    this.WorkerTourIDField = value;
                    this.RaisePropertyChanged("WorkerTourID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
    [System.SerializableAttribute()]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Result> ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HA.MVVMClient.DataService.ErrorStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Result> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HA.MVVMClient.DataService.ErrorStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<string> MemberNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MemberName {
            get {
                return this.MemberNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberNameField, value) != true)) {
                    this.MemberNameField = value;
                    this.RaisePropertyChanged("MemberName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorStatus", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
    public enum ErrorStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValidationError = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 300,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseInfo = 500,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknowenError = 200,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateError = 600,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecurityError = 400,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Date", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Date : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClosedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateContent {
            get {
                return this.DateContentField;
            }
            set {
                if ((this.DateContentField.Equals(value) != true)) {
                    this.DateContentField = value;
                    this.RaisePropertyChanged("DateContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClosed {
            get {
                return this.IsClosedField;
            }
            set {
                if ((this.IsClosedField.Equals(value) != true)) {
                    this.IsClosedField = value;
                    this.RaisePropertyChanged("IsClosed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNight {
            get {
                return this.IsNightField;
            }
            set {
                if ((this.IsNightField.Equals(value) != true)) {
                    this.IsNightField = value;
                    this.RaisePropertyChanged("IsNight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Changeover", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Changeover : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VehicleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateContent {
            get {
                return this.DateContentField;
            }
            set {
                if ((this.DateContentField.Equals(value) != true)) {
                    this.DateContentField = value;
                    this.RaisePropertyChanged("DateContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateID {
            get {
                return this.DateIDField;
            }
            set {
                if ((this.DateIDField.Equals(value) != true)) {
                    this.DateIDField = value;
                    this.RaisePropertyChanged("DateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNight {
            get {
                return this.IsNightField;
            }
            set {
                if ((this.IsNightField.Equals(value) != true)) {
                    this.IsNightField = value;
                    this.RaisePropertyChanged("IsNight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VehicleID {
            get {
                return this.VehicleIDField;
            }
            set {
                if ((this.VehicleIDField.Equals(value) != true)) {
                    this.VehicleIDField = value;
                    this.RaisePropertyChanged("VehicleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleNumber {
            get {
                return this.VehicleNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleNumberField, value) != true)) {
                    this.VehicleNumberField = value;
                    this.RaisePropertyChanged("VehicleNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkTypeID {
            get {
                return this.WorkTypeIDField;
            }
            set {
                if ((this.WorkTypeIDField.Equals(value) != true)) {
                    this.WorkTypeIDField = value;
                    this.RaisePropertyChanged("WorkTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkTypeName {
            get {
                return this.WorkTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkTypeNameField, value) != true)) {
                    this.WorkTypeNameField = value;
                    this.RaisePropertyChanged("WorkTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Work", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Work : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VehicleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CauseDescription {
            get {
                return this.CauseDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseDescriptionField, value) != true)) {
                    this.CauseDescriptionField = value;
                    this.RaisePropertyChanged("CauseDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateContent {
            get {
                return this.DateContentField;
            }
            set {
                if ((this.DateContentField.Equals(value) != true)) {
                    this.DateContentField = value;
                    this.RaisePropertyChanged("DateContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateID {
            get {
                return this.DateIDField;
            }
            set {
                if ((this.DateIDField.Equals(value) != true)) {
                    this.DateIDField = value;
                    this.RaisePropertyChanged("DateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultDescription {
            get {
                return this.FaultDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultDescriptionField, value) != true)) {
                    this.FaultDescriptionField = value;
                    this.RaisePropertyChanged("FaultDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNight {
            get {
                return this.IsNightField;
            }
            set {
                if ((this.IsNightField.Equals(value) != true)) {
                    this.IsNightField = value;
                    this.RaisePropertyChanged("IsNight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VehicleID {
            get {
                return this.VehicleIDField;
            }
            set {
                if ((this.VehicleIDField.Equals(value) != true)) {
                    this.VehicleIDField = value;
                    this.RaisePropertyChanged("VehicleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleNumber {
            get {
                return this.VehicleNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleNumberField, value) != true)) {
                    this.VehicleNumberField = value;
                    this.RaisePropertyChanged("VehicleNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkTypeID {
            get {
                return this.WorkTypeIDField;
            }
            set {
                if ((this.WorkTypeIDField.Equals(value) != true)) {
                    this.WorkTypeIDField = value;
                    this.RaisePropertyChanged("WorkTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkTypeName {
            get {
                return this.WorkTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkTypeNameField, value) != true)) {
                    this.WorkTypeNameField = value;
                    this.RaisePropertyChanged("WorkTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Detachment", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Detachment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tour", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Tour : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerDetail", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class WorkerDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalPhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SapNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServicePhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> ToursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonalEmail {
            get {
                return this.PersonalEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalEmailField, value) != true)) {
                    this.PersonalEmailField = value;
                    this.RaisePropertyChanged("PersonalEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonalPhone {
            get {
                return this.PersonalPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalPhoneField, value) != true)) {
                    this.PersonalPhoneField = value;
                    this.RaisePropertyChanged("PersonalPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Photo {
            get {
                return this.PhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoField, value) != true)) {
                    this.PhotoField = value;
                    this.RaisePropertyChanged("Photo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SapNumber {
            get {
                return this.SapNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SapNumberField, value) != true)) {
                    this.SapNumberField = value;
                    this.RaisePropertyChanged("SapNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceEmail {
            get {
                return this.ServiceEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceEmailField, value) != true)) {
                    this.ServiceEmailField = value;
                    this.RaisePropertyChanged("ServiceEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceNumber {
            get {
                return this.ServiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNumberField, value) != true)) {
                    this.ServiceNumberField = value;
                    this.RaisePropertyChanged("ServiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServicePhone {
            get {
                return this.ServicePhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicePhoneField, value) != true)) {
                    this.ServicePhoneField = value;
                    this.RaisePropertyChanged("ServicePhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> Tours {
            get {
                return this.ToursField;
            }
            set {
                if ((object.ReferenceEquals(this.ToursField, value) != true)) {
                    this.ToursField = value;
                    this.RaisePropertyChanged("Tours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Worker", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class Worker : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SapNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServicePhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SapNumber {
            get {
                return this.SapNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SapNumberField, value) != true)) {
                    this.SapNumberField = value;
                    this.RaisePropertyChanged("SapNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServicePhone {
            get {
                return this.ServicePhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicePhoneField, value) != true)) {
                    this.ServicePhoneField = value;
                    this.RaisePropertyChanged("ServicePhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerState", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class WorkerState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkType", Namespace="http://schemas.datacontract.org/2004/07/HA.Services.Objects")]
    [System.SerializableAttribute()]
    public partial class WorkType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetachmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetachmentID {
            get {
                return this.DetachmentIDField;
            }
            set {
                if ((this.DetachmentIDField.Equals(value) != true)) {
                    this.DetachmentIDField = value;
                    this.RaisePropertyChanged("DetachmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddAttendance", ReplyAction="http://tempuri.org/IDataService/AddAttendanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddAttendanceWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void AddAttendance(HA.MVVMClient.DataService.Attendance attendance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddAttendance", ReplyAction="http://tempuri.org/IDataService/AddAttendanceResponse")]
        System.IAsyncResult BeginAddAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState);
        
        void EndAddAttendance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteAttendance", ReplyAction="http://tempuri.org/IDataService/DeleteAttendanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteAttendanceWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteAttendance(HA.MVVMClient.DataService.Attendance attendance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteAttendance", ReplyAction="http://tempuri.org/IDataService/DeleteAttendanceResponse")]
        System.IAsyncResult BeginDeleteAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAttendance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateAttendance", ReplyAction="http://tempuri.org/IDataService/UpdateAttendanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateAttendanceWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateAttendance(HA.MVVMClient.DataService.Attendance attendance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateAttendance", ReplyAction="http://tempuri.org/IDataService/UpdateAttendanceResponse")]
        System.IAsyncResult BeginUpdateAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAttendance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindAttendances", ReplyAction="http://tempuri.org/IDataService/FindAttendancesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindAttendancesWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> FindAttendances(long dateID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindAttendances", ReplyAction="http://tempuri.org/IDataService/FindAttendancesResponse")]
        System.IAsyncResult BeginFindAttendances(long dateID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> EndFindAttendances(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddDate", ReplyAction="http://tempuri.org/IDataService/AddDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddDateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        long AddDate(HA.MVVMClient.DataService.Date date);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddDate", ReplyAction="http://tempuri.org/IDataService/AddDateResponse")]
        System.IAsyncResult BeginAddDate(HA.MVVMClient.DataService.Date date, System.AsyncCallback callback, object asyncState);
        
        long EndAddDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteDate", ReplyAction="http://tempuri.org/IDataService/DeleteDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteDateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteDate(long dateID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteDate", ReplyAction="http://tempuri.org/IDataService/DeleteDateResponse")]
        System.IAsyncResult BeginDeleteDate(long dateID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateDate", ReplyAction="http://tempuri.org/IDataService/UpdateDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateDateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateDate(HA.MVVMClient.DataService.Date date);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateDate", ReplyAction="http://tempuri.org/IDataService/UpdateDateResponse")]
        System.IAsyncResult BeginUpdateDate(HA.MVVMClient.DataService.Date date, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetYears", ReplyAction="http://tempuri.org/IDataService/GetYearsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/GetYearsWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<int> GetYears(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/GetYears", ReplyAction="http://tempuri.org/IDataService/GetYearsResponse")]
        System.IAsyncResult BeginGetYears(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetYears(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetMonths", ReplyAction="http://tempuri.org/IDataService/GetMonthsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/GetMonthsWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<int> GetMonths(int year, int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/GetMonths", ReplyAction="http://tempuri.org/IDataService/GetMonthsResponse")]
        System.IAsyncResult BeginGetMonths(int year, int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndGetMonths(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindDates", ReplyAction="http://tempuri.org/IDataService/FindDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindDatesWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> FindDates(int year, int month, int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindDates", ReplyAction="http://tempuri.org/IDataService/FindDatesResponse")]
        System.IAsyncResult BeginFindDates(int year, int month, int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> EndFindDates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddChangeover", ReplyAction="http://tempuri.org/IDataService/AddChangeoverResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddChangeoverWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddChangeover(HA.MVVMClient.DataService.Changeover changeover);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddChangeover", ReplyAction="http://tempuri.org/IDataService/AddChangeoverResponse")]
        System.IAsyncResult BeginAddChangeover(HA.MVVMClient.DataService.Changeover changeover, System.AsyncCallback callback, object asyncState);
        
        int EndAddChangeover(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteChangeover", ReplyAction="http://tempuri.org/IDataService/DeleteChangeoverResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteChangeoverWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteChangeover(int changeoverID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteChangeover", ReplyAction="http://tempuri.org/IDataService/DeleteChangeoverResponse")]
        System.IAsyncResult BeginDeleteChangeover(int changeoverID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteChangeover(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateChangeover", ReplyAction="http://tempuri.org/IDataService/UpdateChangeoverResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateChangeoverWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateChangeover(HA.MVVMClient.DataService.Changeover changeover);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateChangeover", ReplyAction="http://tempuri.org/IDataService/UpdateChangeoverResponse")]
        System.IAsyncResult BeginUpdateChangeover(HA.MVVMClient.DataService.Changeover changeover, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateChangeover(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/TransferChangeover", ReplyAction="http://tempuri.org/IDataService/TransferChangeoverResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/TransferChangeoverWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        HA.MVVMClient.DataService.Work TransferChangeover(long dateID, int changeoverID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/TransferChangeover", ReplyAction="http://tempuri.org/IDataService/TransferChangeoverResponse")]
        System.IAsyncResult BeginTransferChangeover(long dateID, int changeoverID, System.AsyncCallback callback, object asyncState);
        
        HA.MVVMClient.DataService.Work EndTransferChangeover(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindChangeovers", ReplyAction="http://tempuri.org/IDataService/FindChangeoversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindChangeoversWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> FindChangeovers(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindChangeovers", ReplyAction="http://tempuri.org/IDataService/FindChangeoversResponse")]
        System.IAsyncResult BeginFindChangeovers(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> EndFindChangeovers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddDetachment", ReplyAction="http://tempuri.org/IDataService/AddDetachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddDetachmentWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddDetachment(HA.MVVMClient.DataService.Detachment detachment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddDetachment", ReplyAction="http://tempuri.org/IDataService/AddDetachmentResponse")]
        System.IAsyncResult BeginAddDetachment(HA.MVVMClient.DataService.Detachment detachment, System.AsyncCallback callback, object asyncState);
        
        int EndAddDetachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteDetachment", ReplyAction="http://tempuri.org/IDataService/DeleteDetachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteDetachmentWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteDetachment(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteDetachment", ReplyAction="http://tempuri.org/IDataService/DeleteDetachmentResponse")]
        System.IAsyncResult BeginDeleteDetachment(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDetachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateDetachment", ReplyAction="http://tempuri.org/IDataService/UpdateDetachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateDetachmentWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateDetachment(HA.MVVMClient.DataService.Detachment detachment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateDetachment", ReplyAction="http://tempuri.org/IDataService/UpdateDetachmentResponse")]
        System.IAsyncResult BeginUpdateDetachment(HA.MVVMClient.DataService.Detachment detachment, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateDetachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindDetachment", ReplyAction="http://tempuri.org/IDataService/FindDetachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindDetachmentWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        HA.MVVMClient.DataService.Detachment FindDetachment(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindDetachment", ReplyAction="http://tempuri.org/IDataService/FindDetachmentResponse")]
        System.IAsyncResult BeginFindDetachment(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        HA.MVVMClient.DataService.Detachment EndFindDetachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDetachments", ReplyAction="http://tempuri.org/IDataService/GetDetachmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/GetDetachmentsWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> GetDetachments();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/GetDetachments", ReplyAction="http://tempuri.org/IDataService/GetDetachmentsResponse")]
        System.IAsyncResult BeginGetDetachments(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> EndGetDetachments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddTour", ReplyAction="http://tempuri.org/IDataService/AddTourResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddTourWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddTour(HA.MVVMClient.DataService.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddTour", ReplyAction="http://tempuri.org/IDataService/AddTourResponse")]
        System.IAsyncResult BeginAddTour(HA.MVVMClient.DataService.Tour tour, System.AsyncCallback callback, object asyncState);
        
        int EndAddTour(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteTour", ReplyAction="http://tempuri.org/IDataService/DeleteTourResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteTourWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteTour(int tourID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteTour", ReplyAction="http://tempuri.org/IDataService/DeleteTourResponse")]
        System.IAsyncResult BeginDeleteTour(int tourID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTour(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateTour", ReplyAction="http://tempuri.org/IDataService/UpdateTourResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateTourWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateTour(HA.MVVMClient.DataService.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateTour", ReplyAction="http://tempuri.org/IDataService/UpdateTourResponse")]
        System.IAsyncResult BeginUpdateTour(HA.MVVMClient.DataService.Tour tour, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTour(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindTours", ReplyAction="http://tempuri.org/IDataService/FindToursResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindToursWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> FindTours(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindTours", ReplyAction="http://tempuri.org/IDataService/FindToursResponse")]
        System.IAsyncResult BeginFindTours(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> EndFindTours(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddVehicle", ReplyAction="http://tempuri.org/IDataService/AddVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddVehicleWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddVehicle(HA.MVVMClient.DataService.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddVehicle", ReplyAction="http://tempuri.org/IDataService/AddVehicleResponse")]
        System.IAsyncResult BeginAddVehicle(HA.MVVMClient.DataService.Vehicle vehicle, System.AsyncCallback callback, object asyncState);
        
        int EndAddVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteVehicle", ReplyAction="http://tempuri.org/IDataService/DeleteVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteVehicleWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteVehicle(int vehicleID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteVehicle", ReplyAction="http://tempuri.org/IDataService/DeleteVehicleResponse")]
        System.IAsyncResult BeginDeleteVehicle(int vehicleID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateVehicle", ReplyAction="http://tempuri.org/IDataService/UpdateVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateVehicleWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateVehicle(HA.MVVMClient.DataService.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateVehicle", ReplyAction="http://tempuri.org/IDataService/UpdateVehicleResponse")]
        System.IAsyncResult BeginUpdateVehicle(HA.MVVMClient.DataService.Vehicle vehicle, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindVehicles", ReplyAction="http://tempuri.org/IDataService/FindVehiclesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindVehiclesWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> FindVehicles(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindVehicles", ReplyAction="http://tempuri.org/IDataService/FindVehiclesResponse")]
        System.IAsyncResult BeginFindVehicles(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> EndFindVehicles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddWork", ReplyAction="http://tempuri.org/IDataService/AddWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddWorkWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        long AddWork(HA.MVVMClient.DataService.Work work);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddWork", ReplyAction="http://tempuri.org/IDataService/AddWorkResponse")]
        System.IAsyncResult BeginAddWork(HA.MVVMClient.DataService.Work work, System.AsyncCallback callback, object asyncState);
        
        long EndAddWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteWork", ReplyAction="http://tempuri.org/IDataService/DeleteWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteWorkWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteWork(long workID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteWork", ReplyAction="http://tempuri.org/IDataService/DeleteWorkResponse")]
        System.IAsyncResult BeginDeleteWork(long workID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateWork", ReplyAction="http://tempuri.org/IDataService/UpdateWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateWorkWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateWork(HA.MVVMClient.DataService.Work work);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateWork", ReplyAction="http://tempuri.org/IDataService/UpdateWorkResponse")]
        System.IAsyncResult BeginUpdateWork(HA.MVVMClient.DataService.Work work, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindWorks", ReplyAction="http://tempuri.org/IDataService/FindWorksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindWorksWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> FindWorks(long dateID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindWorks", ReplyAction="http://tempuri.org/IDataService/FindWorksResponse")]
        System.IAsyncResult BeginFindWorks(long dateID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> EndFindWorks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTopFaultWorks", ReplyAction="http://tempuri.org/IDataService/GetTopFaultWorksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/GetTopFaultWorksWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<string> GetTopFaultWorks(int count, int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/GetTopFaultWorks", ReplyAction="http://tempuri.org/IDataService/GetTopFaultWorksResponse")]
        System.IAsyncResult BeginGetTopFaultWorks(int count, int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetTopFaultWorks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTopCauseWorks", ReplyAction="http://tempuri.org/IDataService/GetTopCauseWorksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/GetTopCauseWorksWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<string> GetTopCauseWorks(int count, int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/GetTopCauseWorks", ReplyAction="http://tempuri.org/IDataService/GetTopCauseWorksResponse")]
        System.IAsyncResult BeginGetTopCauseWorks(int count, int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetTopCauseWorks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddWorker", ReplyAction="http://tempuri.org/IDataService/AddWorkerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddWorkerWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddWorker(HA.MVVMClient.DataService.WorkerDetail worker);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddWorker", ReplyAction="http://tempuri.org/IDataService/AddWorkerResponse")]
        System.IAsyncResult BeginAddWorker(HA.MVVMClient.DataService.WorkerDetail worker, System.AsyncCallback callback, object asyncState);
        
        int EndAddWorker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteWorker", ReplyAction="http://tempuri.org/IDataService/DeleteWorkerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteWorkerWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteWorker(int workerID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteWorker", ReplyAction="http://tempuri.org/IDataService/DeleteWorkerResponse")]
        System.IAsyncResult BeginDeleteWorker(int workerID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWorker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateWorker", ReplyAction="http://tempuri.org/IDataService/UpdateWorkerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateWorkerWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateWorker(HA.MVVMClient.DataService.WorkerDetail worker);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateWorker", ReplyAction="http://tempuri.org/IDataService/UpdateWorkerResponse")]
        System.IAsyncResult BeginUpdateWorker(HA.MVVMClient.DataService.WorkerDetail worker, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateWorker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindWorker", ReplyAction="http://tempuri.org/IDataService/FindWorkerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindWorkerWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        HA.MVVMClient.DataService.WorkerDetail FindWorker(int workerID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindWorker", ReplyAction="http://tempuri.org/IDataService/FindWorkerResponse")]
        System.IAsyncResult BeginFindWorker(int workerID, System.AsyncCallback callback, object asyncState);
        
        HA.MVVMClient.DataService.WorkerDetail EndFindWorker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindWorkers", ReplyAction="http://tempuri.org/IDataService/FindWorkersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindWorkersWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> FindWorkers(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindWorkers", ReplyAction="http://tempuri.org/IDataService/FindWorkersResponse")]
        System.IAsyncResult BeginFindWorkers(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> EndFindWorkers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddWorkerState", ReplyAction="http://tempuri.org/IDataService/AddWorkerStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddWorkerStateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddWorkerState(HA.MVVMClient.DataService.WorkerState workerState);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddWorkerState", ReplyAction="http://tempuri.org/IDataService/AddWorkerStateResponse")]
        System.IAsyncResult BeginAddWorkerState(HA.MVVMClient.DataService.WorkerState workerState, System.AsyncCallback callback, object asyncState);
        
        int EndAddWorkerState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteWorkerState", ReplyAction="http://tempuri.org/IDataService/DeleteWorkerStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteWorkerStateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteWorkerState(int workerStateID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteWorkerState", ReplyAction="http://tempuri.org/IDataService/DeleteWorkerStateResponse")]
        System.IAsyncResult BeginDeleteWorkerState(int workerStateID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWorkerState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateWorkerState", ReplyAction="http://tempuri.org/IDataService/UpdateWorkerStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateWorkerStateWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateWorkerState(HA.MVVMClient.DataService.WorkerState workerState);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateWorkerState", ReplyAction="http://tempuri.org/IDataService/UpdateWorkerStateResponse")]
        System.IAsyncResult BeginUpdateWorkerState(HA.MVVMClient.DataService.WorkerState workerState, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateWorkerState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindWorkerStates", ReplyAction="http://tempuri.org/IDataService/FindWorkerStatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindWorkerStatesWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> FindWorkerStates(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindWorkerStates", ReplyAction="http://tempuri.org/IDataService/FindWorkerStatesResponse")]
        System.IAsyncResult BeginFindWorkerStates(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> EndFindWorkerStates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddWorkType", ReplyAction="http://tempuri.org/IDataService/AddWorkTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/AddWorkTypeWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        int AddWorkType(HA.MVVMClient.DataService.WorkType workType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/AddWorkType", ReplyAction="http://tempuri.org/IDataService/AddWorkTypeResponse")]
        System.IAsyncResult BeginAddWorkType(HA.MVVMClient.DataService.WorkType workType, System.AsyncCallback callback, object asyncState);
        
        int EndAddWorkType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/DeleteWorkType", ReplyAction="http://tempuri.org/IDataService/DeleteWorkTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/DeleteWorkTypeWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void DeleteWorkType(int workTypeID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/DeleteWorkType", ReplyAction="http://tempuri.org/IDataService/DeleteWorkTypeResponse")]
        System.IAsyncResult BeginDeleteWorkType(int workTypeID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWorkType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/UpdateWorkType", ReplyAction="http://tempuri.org/IDataService/UpdateWorkTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/UpdateWorkTypeWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        void UpdateWorkType(HA.MVVMClient.DataService.WorkType workType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/UpdateWorkType", ReplyAction="http://tempuri.org/IDataService/UpdateWorkTypeResponse")]
        System.IAsyncResult BeginUpdateWorkType(HA.MVVMClient.DataService.WorkType workType, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateWorkType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/FindWorkTypes", ReplyAction="http://tempuri.org/IDataService/FindWorkTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HA.MVVMClient.DataService.WcfException), Action="http://tempuri.org/IDataService/FindWorkTypesWcfExceptionFault", Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/HA.Services")]
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> FindWorkTypes(int detachmentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataService/FindWorkTypes", ReplyAction="http://tempuri.org/IDataService/FindWorkTypesResponse")]
        System.IAsyncResult BeginFindWorkTypes(int detachmentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> EndFindWorkTypes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : HA.MVVMClient.DataService.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindAttendancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindAttendancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetYearsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetYearsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMonthsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMonthsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddChangeoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddChangeoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferChangeoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransferChangeoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HA.MVVMClient.DataService.Work Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HA.MVVMClient.DataService.Work)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindChangeoversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindChangeoversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDetachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDetachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindDetachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindDetachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HA.MVVMClient.DataService.Detachment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HA.MVVMClient.DataService.Detachment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDetachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDetachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTourCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTourCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindToursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindToursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindVehiclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindVehiclesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindWorksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTopFaultWorksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTopFaultWorksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTopCauseWorksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTopCauseWorksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindWorkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HA.MVVMClient.DataService.WorkerDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HA.MVVMClient.DataService.WorkerDetail)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorkersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindWorkersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkerStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkerStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorkerStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindWorkerStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorkTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindWorkTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<HA.MVVMClient.DataService.IDataService>, HA.MVVMClient.DataService.IDataService {
        
        private BeginOperationDelegate onBeginAddAttendanceDelegate;
        
        private EndOperationDelegate onEndAddAttendanceDelegate;
        
        private System.Threading.SendOrPostCallback onAddAttendanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAttendanceDelegate;
        
        private EndOperationDelegate onEndDeleteAttendanceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAttendanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAttendanceDelegate;
        
        private EndOperationDelegate onEndUpdateAttendanceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAttendanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindAttendancesDelegate;
        
        private EndOperationDelegate onEndFindAttendancesDelegate;
        
        private System.Threading.SendOrPostCallback onFindAttendancesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDateDelegate;
        
        private EndOperationDelegate onEndAddDateDelegate;
        
        private System.Threading.SendOrPostCallback onAddDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDateDelegate;
        
        private EndOperationDelegate onEndDeleteDateDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDateDelegate;
        
        private EndOperationDelegate onEndUpdateDateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetYearsDelegate;
        
        private EndOperationDelegate onEndGetYearsDelegate;
        
        private System.Threading.SendOrPostCallback onGetYearsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMonthsDelegate;
        
        private EndOperationDelegate onEndGetMonthsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMonthsCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindDatesDelegate;
        
        private EndOperationDelegate onEndFindDatesDelegate;
        
        private System.Threading.SendOrPostCallback onFindDatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddChangeoverDelegate;
        
        private EndOperationDelegate onEndAddChangeoverDelegate;
        
        private System.Threading.SendOrPostCallback onAddChangeoverCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteChangeoverDelegate;
        
        private EndOperationDelegate onEndDeleteChangeoverDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteChangeoverCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateChangeoverDelegate;
        
        private EndOperationDelegate onEndUpdateChangeoverDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateChangeoverCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransferChangeoverDelegate;
        
        private EndOperationDelegate onEndTransferChangeoverDelegate;
        
        private System.Threading.SendOrPostCallback onTransferChangeoverCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindChangeoversDelegate;
        
        private EndOperationDelegate onEndFindChangeoversDelegate;
        
        private System.Threading.SendOrPostCallback onFindChangeoversCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDetachmentDelegate;
        
        private EndOperationDelegate onEndAddDetachmentDelegate;
        
        private System.Threading.SendOrPostCallback onAddDetachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDetachmentDelegate;
        
        private EndOperationDelegate onEndDeleteDetachmentDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDetachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDetachmentDelegate;
        
        private EndOperationDelegate onEndUpdateDetachmentDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDetachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindDetachmentDelegate;
        
        private EndOperationDelegate onEndFindDetachmentDelegate;
        
        private System.Threading.SendOrPostCallback onFindDetachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDetachmentsDelegate;
        
        private EndOperationDelegate onEndGetDetachmentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDetachmentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTourDelegate;
        
        private EndOperationDelegate onEndAddTourDelegate;
        
        private System.Threading.SendOrPostCallback onAddTourCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTourDelegate;
        
        private EndOperationDelegate onEndDeleteTourDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTourCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTourDelegate;
        
        private EndOperationDelegate onEndUpdateTourDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTourCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindToursDelegate;
        
        private EndOperationDelegate onEndFindToursDelegate;
        
        private System.Threading.SendOrPostCallback onFindToursCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddVehicleDelegate;
        
        private EndOperationDelegate onEndAddVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onAddVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteVehicleDelegate;
        
        private EndOperationDelegate onEndDeleteVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateVehicleDelegate;
        
        private EndOperationDelegate onEndUpdateVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindVehiclesDelegate;
        
        private EndOperationDelegate onEndFindVehiclesDelegate;
        
        private System.Threading.SendOrPostCallback onFindVehiclesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkDelegate;
        
        private EndOperationDelegate onEndAddWorkDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkDelegate;
        
        private EndOperationDelegate onEndDeleteWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkDelegate;
        
        private EndOperationDelegate onEndUpdateWorkDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindWorksDelegate;
        
        private EndOperationDelegate onEndFindWorksDelegate;
        
        private System.Threading.SendOrPostCallback onFindWorksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTopFaultWorksDelegate;
        
        private EndOperationDelegate onEndGetTopFaultWorksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTopFaultWorksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTopCauseWorksDelegate;
        
        private EndOperationDelegate onEndGetTopCauseWorksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTopCauseWorksCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkerDelegate;
        
        private EndOperationDelegate onEndAddWorkerDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkerDelegate;
        
        private EndOperationDelegate onEndDeleteWorkerDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkerDelegate;
        
        private EndOperationDelegate onEndUpdateWorkerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindWorkerDelegate;
        
        private EndOperationDelegate onEndFindWorkerDelegate;
        
        private System.Threading.SendOrPostCallback onFindWorkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindWorkersDelegate;
        
        private EndOperationDelegate onEndFindWorkersDelegate;
        
        private System.Threading.SendOrPostCallback onFindWorkersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkerStateDelegate;
        
        private EndOperationDelegate onEndAddWorkerStateDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkerStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkerStateDelegate;
        
        private EndOperationDelegate onEndDeleteWorkerStateDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkerStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkerStateDelegate;
        
        private EndOperationDelegate onEndUpdateWorkerStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkerStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindWorkerStatesDelegate;
        
        private EndOperationDelegate onEndFindWorkerStatesDelegate;
        
        private System.Threading.SendOrPostCallback onFindWorkerStatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkTypeDelegate;
        
        private EndOperationDelegate onEndAddWorkTypeDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkTypeDelegate;
        
        private EndOperationDelegate onEndDeleteWorkTypeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkTypeDelegate;
        
        private EndOperationDelegate onEndUpdateWorkTypeDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindWorkTypesDelegate;
        
        private EndOperationDelegate onEndFindWorkTypesDelegate;
        
        private System.Threading.SendOrPostCallback onFindWorkTypesCompletedDelegate;
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddAttendanceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAttendanceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAttendanceCompleted;
        
        public event System.EventHandler<FindAttendancesCompletedEventArgs> FindAttendancesCompleted;
        
        public event System.EventHandler<AddDateCompletedEventArgs> AddDateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateDateCompleted;
        
        public event System.EventHandler<GetYearsCompletedEventArgs> GetYearsCompleted;
        
        public event System.EventHandler<GetMonthsCompletedEventArgs> GetMonthsCompleted;
        
        public event System.EventHandler<FindDatesCompletedEventArgs> FindDatesCompleted;
        
        public event System.EventHandler<AddChangeoverCompletedEventArgs> AddChangeoverCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteChangeoverCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateChangeoverCompleted;
        
        public event System.EventHandler<TransferChangeoverCompletedEventArgs> TransferChangeoverCompleted;
        
        public event System.EventHandler<FindChangeoversCompletedEventArgs> FindChangeoversCompleted;
        
        public event System.EventHandler<AddDetachmentCompletedEventArgs> AddDetachmentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDetachmentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateDetachmentCompleted;
        
        public event System.EventHandler<FindDetachmentCompletedEventArgs> FindDetachmentCompleted;
        
        public event System.EventHandler<GetDetachmentsCompletedEventArgs> GetDetachmentsCompleted;
        
        public event System.EventHandler<AddTourCompletedEventArgs> AddTourCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTourCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTourCompleted;
        
        public event System.EventHandler<FindToursCompletedEventArgs> FindToursCompleted;
        
        public event System.EventHandler<AddVehicleCompletedEventArgs> AddVehicleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteVehicleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateVehicleCompleted;
        
        public event System.EventHandler<FindVehiclesCompletedEventArgs> FindVehiclesCompleted;
        
        public event System.EventHandler<AddWorkCompletedEventArgs> AddWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateWorkCompleted;
        
        public event System.EventHandler<FindWorksCompletedEventArgs> FindWorksCompleted;
        
        public event System.EventHandler<GetTopFaultWorksCompletedEventArgs> GetTopFaultWorksCompleted;
        
        public event System.EventHandler<GetTopCauseWorksCompletedEventArgs> GetTopCauseWorksCompleted;
        
        public event System.EventHandler<AddWorkerCompletedEventArgs> AddWorkerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateWorkerCompleted;
        
        public event System.EventHandler<FindWorkerCompletedEventArgs> FindWorkerCompleted;
        
        public event System.EventHandler<FindWorkersCompletedEventArgs> FindWorkersCompleted;
        
        public event System.EventHandler<AddWorkerStateCompletedEventArgs> AddWorkerStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkerStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateWorkerStateCompleted;
        
        public event System.EventHandler<FindWorkerStatesCompletedEventArgs> FindWorkerStatesCompleted;
        
        public event System.EventHandler<AddWorkTypeCompletedEventArgs> AddWorkTypeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkTypeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateWorkTypeCompleted;
        
        public event System.EventHandler<FindWorkTypesCompletedEventArgs> FindWorkTypesCompleted;
        
        public void AddAttendance(HA.MVVMClient.DataService.Attendance attendance) {
            base.Channel.AddAttendance(attendance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAttendance(attendance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddAttendance(System.IAsyncResult result) {
            base.Channel.EndAddAttendance(result);
        }
        
        private System.IAsyncResult OnBeginAddAttendance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Attendance attendance = ((HA.MVVMClient.DataService.Attendance)(inValues[0]));
            return this.BeginAddAttendance(attendance, callback, asyncState);
        }
        
        private object[] OnEndAddAttendance(System.IAsyncResult result) {
            this.EndAddAttendance(result);
            return null;
        }
        
        private void OnAddAttendanceCompleted(object state) {
            if ((this.AddAttendanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAttendanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance) {
            this.AddAttendanceAsync(attendance, null);
        }
        
        public void AddAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance, object userState) {
            if ((this.onBeginAddAttendanceDelegate == null)) {
                this.onBeginAddAttendanceDelegate = new BeginOperationDelegate(this.OnBeginAddAttendance);
            }
            if ((this.onEndAddAttendanceDelegate == null)) {
                this.onEndAddAttendanceDelegate = new EndOperationDelegate(this.OnEndAddAttendance);
            }
            if ((this.onAddAttendanceCompletedDelegate == null)) {
                this.onAddAttendanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAttendanceCompleted);
            }
            base.InvokeAsync(this.onBeginAddAttendanceDelegate, new object[] {
                        attendance}, this.onEndAddAttendanceDelegate, this.onAddAttendanceCompletedDelegate, userState);
        }
        
        public void DeleteAttendance(HA.MVVMClient.DataService.Attendance attendance) {
            base.Channel.DeleteAttendance(attendance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAttendance(attendance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteAttendance(System.IAsyncResult result) {
            base.Channel.EndDeleteAttendance(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAttendance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Attendance attendance = ((HA.MVVMClient.DataService.Attendance)(inValues[0]));
            return this.BeginDeleteAttendance(attendance, callback, asyncState);
        }
        
        private object[] OnEndDeleteAttendance(System.IAsyncResult result) {
            this.EndDeleteAttendance(result);
            return null;
        }
        
        private void OnDeleteAttendanceCompleted(object state) {
            if ((this.DeleteAttendanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAttendanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance) {
            this.DeleteAttendanceAsync(attendance, null);
        }
        
        public void DeleteAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance, object userState) {
            if ((this.onBeginDeleteAttendanceDelegate == null)) {
                this.onBeginDeleteAttendanceDelegate = new BeginOperationDelegate(this.OnBeginDeleteAttendance);
            }
            if ((this.onEndDeleteAttendanceDelegate == null)) {
                this.onEndDeleteAttendanceDelegate = new EndOperationDelegate(this.OnEndDeleteAttendance);
            }
            if ((this.onDeleteAttendanceCompletedDelegate == null)) {
                this.onDeleteAttendanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAttendanceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAttendanceDelegate, new object[] {
                        attendance}, this.onEndDeleteAttendanceDelegate, this.onDeleteAttendanceCompletedDelegate, userState);
        }
        
        public void UpdateAttendance(HA.MVVMClient.DataService.Attendance attendance) {
            base.Channel.UpdateAttendance(attendance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAttendance(HA.MVVMClient.DataService.Attendance attendance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAttendance(attendance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAttendance(System.IAsyncResult result) {
            base.Channel.EndUpdateAttendance(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAttendance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Attendance attendance = ((HA.MVVMClient.DataService.Attendance)(inValues[0]));
            return this.BeginUpdateAttendance(attendance, callback, asyncState);
        }
        
        private object[] OnEndUpdateAttendance(System.IAsyncResult result) {
            this.EndUpdateAttendance(result);
            return null;
        }
        
        private void OnUpdateAttendanceCompleted(object state) {
            if ((this.UpdateAttendanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAttendanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance) {
            this.UpdateAttendanceAsync(attendance, null);
        }
        
        public void UpdateAttendanceAsync(HA.MVVMClient.DataService.Attendance attendance, object userState) {
            if ((this.onBeginUpdateAttendanceDelegate == null)) {
                this.onBeginUpdateAttendanceDelegate = new BeginOperationDelegate(this.OnBeginUpdateAttendance);
            }
            if ((this.onEndUpdateAttendanceDelegate == null)) {
                this.onEndUpdateAttendanceDelegate = new EndOperationDelegate(this.OnEndUpdateAttendance);
            }
            if ((this.onUpdateAttendanceCompletedDelegate == null)) {
                this.onUpdateAttendanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAttendanceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAttendanceDelegate, new object[] {
                        attendance}, this.onEndUpdateAttendanceDelegate, this.onUpdateAttendanceCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> FindAttendances(long dateID) {
            return base.Channel.FindAttendances(dateID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindAttendances(long dateID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindAttendances(dateID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> EndFindAttendances(System.IAsyncResult result) {
            return base.Channel.EndFindAttendances(result);
        }
        
        private System.IAsyncResult OnBeginFindAttendances(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long dateID = ((long)(inValues[0]));
            return this.BeginFindAttendances(dateID, callback, asyncState);
        }
        
        private object[] OnEndFindAttendances(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Attendance> retVal = this.EndFindAttendances(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindAttendancesCompleted(object state) {
            if ((this.FindAttendancesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindAttendancesCompleted(this, new FindAttendancesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindAttendancesAsync(long dateID) {
            this.FindAttendancesAsync(dateID, null);
        }
        
        public void FindAttendancesAsync(long dateID, object userState) {
            if ((this.onBeginFindAttendancesDelegate == null)) {
                this.onBeginFindAttendancesDelegate = new BeginOperationDelegate(this.OnBeginFindAttendances);
            }
            if ((this.onEndFindAttendancesDelegate == null)) {
                this.onEndFindAttendancesDelegate = new EndOperationDelegate(this.OnEndFindAttendances);
            }
            if ((this.onFindAttendancesCompletedDelegate == null)) {
                this.onFindAttendancesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindAttendancesCompleted);
            }
            base.InvokeAsync(this.onBeginFindAttendancesDelegate, new object[] {
                        dateID}, this.onEndFindAttendancesDelegate, this.onFindAttendancesCompletedDelegate, userState);
        }
        
        public long AddDate(HA.MVVMClient.DataService.Date date) {
            return base.Channel.AddDate(date);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddDate(HA.MVVMClient.DataService.Date date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDate(date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndAddDate(System.IAsyncResult result) {
            return base.Channel.EndAddDate(result);
        }
        
        private System.IAsyncResult OnBeginAddDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Date date = ((HA.MVVMClient.DataService.Date)(inValues[0]));
            return this.BeginAddDate(date, callback, asyncState);
        }
        
        private object[] OnEndAddDate(System.IAsyncResult result) {
            long retVal = this.EndAddDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDateCompleted(object state) {
            if ((this.AddDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDateCompleted(this, new AddDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDateAsync(HA.MVVMClient.DataService.Date date) {
            this.AddDateAsync(date, null);
        }
        
        public void AddDateAsync(HA.MVVMClient.DataService.Date date, object userState) {
            if ((this.onBeginAddDateDelegate == null)) {
                this.onBeginAddDateDelegate = new BeginOperationDelegate(this.OnBeginAddDate);
            }
            if ((this.onEndAddDateDelegate == null)) {
                this.onEndAddDateDelegate = new EndOperationDelegate(this.OnEndAddDate);
            }
            if ((this.onAddDateCompletedDelegate == null)) {
                this.onAddDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDateCompleted);
            }
            base.InvokeAsync(this.onBeginAddDateDelegate, new object[] {
                        date}, this.onEndAddDateDelegate, this.onAddDateCompletedDelegate, userState);
        }
        
        public void DeleteDate(long dateID) {
            base.Channel.DeleteDate(dateID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteDate(long dateID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDate(dateID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteDate(System.IAsyncResult result) {
            base.Channel.EndDeleteDate(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long dateID = ((long)(inValues[0]));
            return this.BeginDeleteDate(dateID, callback, asyncState);
        }
        
        private object[] OnEndDeleteDate(System.IAsyncResult result) {
            this.EndDeleteDate(result);
            return null;
        }
        
        private void OnDeleteDateCompleted(object state) {
            if ((this.DeleteDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDateAsync(long dateID) {
            this.DeleteDateAsync(dateID, null);
        }
        
        public void DeleteDateAsync(long dateID, object userState) {
            if ((this.onBeginDeleteDateDelegate == null)) {
                this.onBeginDeleteDateDelegate = new BeginOperationDelegate(this.OnBeginDeleteDate);
            }
            if ((this.onEndDeleteDateDelegate == null)) {
                this.onEndDeleteDateDelegate = new EndOperationDelegate(this.OnEndDeleteDate);
            }
            if ((this.onDeleteDateCompletedDelegate == null)) {
                this.onDeleteDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDateCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDateDelegate, new object[] {
                        dateID}, this.onEndDeleteDateDelegate, this.onDeleteDateCompletedDelegate, userState);
        }
        
        public void UpdateDate(HA.MVVMClient.DataService.Date date) {
            base.Channel.UpdateDate(date);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateDate(HA.MVVMClient.DataService.Date date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDate(date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateDate(System.IAsyncResult result) {
            base.Channel.EndUpdateDate(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Date date = ((HA.MVVMClient.DataService.Date)(inValues[0]));
            return this.BeginUpdateDate(date, callback, asyncState);
        }
        
        private object[] OnEndUpdateDate(System.IAsyncResult result) {
            this.EndUpdateDate(result);
            return null;
        }
        
        private void OnUpdateDateCompleted(object state) {
            if ((this.UpdateDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDateAsync(HA.MVVMClient.DataService.Date date) {
            this.UpdateDateAsync(date, null);
        }
        
        public void UpdateDateAsync(HA.MVVMClient.DataService.Date date, object userState) {
            if ((this.onBeginUpdateDateDelegate == null)) {
                this.onBeginUpdateDateDelegate = new BeginOperationDelegate(this.OnBeginUpdateDate);
            }
            if ((this.onEndUpdateDateDelegate == null)) {
                this.onEndUpdateDateDelegate = new EndOperationDelegate(this.OnEndUpdateDate);
            }
            if ((this.onUpdateDateCompletedDelegate == null)) {
                this.onUpdateDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDateDelegate, new object[] {
                        date}, this.onEndUpdateDateDelegate, this.onUpdateDateCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> GetYears(int detachmentID) {
            return base.Channel.GetYears(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetYears(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetYears(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<int> EndGetYears(System.IAsyncResult result) {
            return base.Channel.EndGetYears(result);
        }
        
        private System.IAsyncResult OnBeginGetYears(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginGetYears(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndGetYears(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = this.EndGetYears(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetYearsCompleted(object state) {
            if ((this.GetYearsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetYearsCompleted(this, new GetYearsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetYearsAsync(int detachmentID) {
            this.GetYearsAsync(detachmentID, null);
        }
        
        public void GetYearsAsync(int detachmentID, object userState) {
            if ((this.onBeginGetYearsDelegate == null)) {
                this.onBeginGetYearsDelegate = new BeginOperationDelegate(this.OnBeginGetYears);
            }
            if ((this.onEndGetYearsDelegate == null)) {
                this.onEndGetYearsDelegate = new EndOperationDelegate(this.OnEndGetYears);
            }
            if ((this.onGetYearsCompletedDelegate == null)) {
                this.onGetYearsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetYearsCompleted);
            }
            base.InvokeAsync(this.onBeginGetYearsDelegate, new object[] {
                        detachmentID}, this.onEndGetYearsDelegate, this.onGetYearsCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> GetMonths(int year, int detachmentID) {
            return base.Channel.GetMonths(year, detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMonths(int year, int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMonths(year, detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<int> EndGetMonths(System.IAsyncResult result) {
            return base.Channel.EndGetMonths(result);
        }
        
        private System.IAsyncResult OnBeginGetMonths(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int year = ((int)(inValues[0]));
            int detachmentID = ((int)(inValues[1]));
            return this.BeginGetMonths(year, detachmentID, callback, asyncState);
        }
        
        private object[] OnEndGetMonths(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = this.EndGetMonths(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMonthsCompleted(object state) {
            if ((this.GetMonthsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMonthsCompleted(this, new GetMonthsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMonthsAsync(int year, int detachmentID) {
            this.GetMonthsAsync(year, detachmentID, null);
        }
        
        public void GetMonthsAsync(int year, int detachmentID, object userState) {
            if ((this.onBeginGetMonthsDelegate == null)) {
                this.onBeginGetMonthsDelegate = new BeginOperationDelegate(this.OnBeginGetMonths);
            }
            if ((this.onEndGetMonthsDelegate == null)) {
                this.onEndGetMonthsDelegate = new EndOperationDelegate(this.OnEndGetMonths);
            }
            if ((this.onGetMonthsCompletedDelegate == null)) {
                this.onGetMonthsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMonthsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMonthsDelegate, new object[] {
                        year,
                        detachmentID}, this.onEndGetMonthsDelegate, this.onGetMonthsCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> FindDates(int year, int month, int detachmentID) {
            return base.Channel.FindDates(year, month, detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindDates(int year, int month, int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindDates(year, month, detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> EndFindDates(System.IAsyncResult result) {
            return base.Channel.EndFindDates(result);
        }
        
        private System.IAsyncResult OnBeginFindDates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int year = ((int)(inValues[0]));
            int month = ((int)(inValues[1]));
            int detachmentID = ((int)(inValues[2]));
            return this.BeginFindDates(year, month, detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindDates(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Date> retVal = this.EndFindDates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindDatesCompleted(object state) {
            if ((this.FindDatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindDatesCompleted(this, new FindDatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindDatesAsync(int year, int month, int detachmentID) {
            this.FindDatesAsync(year, month, detachmentID, null);
        }
        
        public void FindDatesAsync(int year, int month, int detachmentID, object userState) {
            if ((this.onBeginFindDatesDelegate == null)) {
                this.onBeginFindDatesDelegate = new BeginOperationDelegate(this.OnBeginFindDates);
            }
            if ((this.onEndFindDatesDelegate == null)) {
                this.onEndFindDatesDelegate = new EndOperationDelegate(this.OnEndFindDates);
            }
            if ((this.onFindDatesCompletedDelegate == null)) {
                this.onFindDatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindDatesCompleted);
            }
            base.InvokeAsync(this.onBeginFindDatesDelegate, new object[] {
                        year,
                        month,
                        detachmentID}, this.onEndFindDatesDelegate, this.onFindDatesCompletedDelegate, userState);
        }
        
        public int AddChangeover(HA.MVVMClient.DataService.Changeover changeover) {
            return base.Channel.AddChangeover(changeover);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddChangeover(HA.MVVMClient.DataService.Changeover changeover, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddChangeover(changeover, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddChangeover(System.IAsyncResult result) {
            return base.Channel.EndAddChangeover(result);
        }
        
        private System.IAsyncResult OnBeginAddChangeover(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Changeover changeover = ((HA.MVVMClient.DataService.Changeover)(inValues[0]));
            return this.BeginAddChangeover(changeover, callback, asyncState);
        }
        
        private object[] OnEndAddChangeover(System.IAsyncResult result) {
            int retVal = this.EndAddChangeover(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddChangeoverCompleted(object state) {
            if ((this.AddChangeoverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddChangeoverCompleted(this, new AddChangeoverCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddChangeoverAsync(HA.MVVMClient.DataService.Changeover changeover) {
            this.AddChangeoverAsync(changeover, null);
        }
        
        public void AddChangeoverAsync(HA.MVVMClient.DataService.Changeover changeover, object userState) {
            if ((this.onBeginAddChangeoverDelegate == null)) {
                this.onBeginAddChangeoverDelegate = new BeginOperationDelegate(this.OnBeginAddChangeover);
            }
            if ((this.onEndAddChangeoverDelegate == null)) {
                this.onEndAddChangeoverDelegate = new EndOperationDelegate(this.OnEndAddChangeover);
            }
            if ((this.onAddChangeoverCompletedDelegate == null)) {
                this.onAddChangeoverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddChangeoverCompleted);
            }
            base.InvokeAsync(this.onBeginAddChangeoverDelegate, new object[] {
                        changeover}, this.onEndAddChangeoverDelegate, this.onAddChangeoverCompletedDelegate, userState);
        }
        
        public void DeleteChangeover(int changeoverID) {
            base.Channel.DeleteChangeover(changeoverID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteChangeover(int changeoverID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteChangeover(changeoverID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteChangeover(System.IAsyncResult result) {
            base.Channel.EndDeleteChangeover(result);
        }
        
        private System.IAsyncResult OnBeginDeleteChangeover(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int changeoverID = ((int)(inValues[0]));
            return this.BeginDeleteChangeover(changeoverID, callback, asyncState);
        }
        
        private object[] OnEndDeleteChangeover(System.IAsyncResult result) {
            this.EndDeleteChangeover(result);
            return null;
        }
        
        private void OnDeleteChangeoverCompleted(object state) {
            if ((this.DeleteChangeoverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteChangeoverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteChangeoverAsync(int changeoverID) {
            this.DeleteChangeoverAsync(changeoverID, null);
        }
        
        public void DeleteChangeoverAsync(int changeoverID, object userState) {
            if ((this.onBeginDeleteChangeoverDelegate == null)) {
                this.onBeginDeleteChangeoverDelegate = new BeginOperationDelegate(this.OnBeginDeleteChangeover);
            }
            if ((this.onEndDeleteChangeoverDelegate == null)) {
                this.onEndDeleteChangeoverDelegate = new EndOperationDelegate(this.OnEndDeleteChangeover);
            }
            if ((this.onDeleteChangeoverCompletedDelegate == null)) {
                this.onDeleteChangeoverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteChangeoverCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteChangeoverDelegate, new object[] {
                        changeoverID}, this.onEndDeleteChangeoverDelegate, this.onDeleteChangeoverCompletedDelegate, userState);
        }
        
        public void UpdateChangeover(HA.MVVMClient.DataService.Changeover changeover) {
            base.Channel.UpdateChangeover(changeover);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateChangeover(HA.MVVMClient.DataService.Changeover changeover, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateChangeover(changeover, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateChangeover(System.IAsyncResult result) {
            base.Channel.EndUpdateChangeover(result);
        }
        
        private System.IAsyncResult OnBeginUpdateChangeover(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Changeover changeover = ((HA.MVVMClient.DataService.Changeover)(inValues[0]));
            return this.BeginUpdateChangeover(changeover, callback, asyncState);
        }
        
        private object[] OnEndUpdateChangeover(System.IAsyncResult result) {
            this.EndUpdateChangeover(result);
            return null;
        }
        
        private void OnUpdateChangeoverCompleted(object state) {
            if ((this.UpdateChangeoverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateChangeoverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateChangeoverAsync(HA.MVVMClient.DataService.Changeover changeover) {
            this.UpdateChangeoverAsync(changeover, null);
        }
        
        public void UpdateChangeoverAsync(HA.MVVMClient.DataService.Changeover changeover, object userState) {
            if ((this.onBeginUpdateChangeoverDelegate == null)) {
                this.onBeginUpdateChangeoverDelegate = new BeginOperationDelegate(this.OnBeginUpdateChangeover);
            }
            if ((this.onEndUpdateChangeoverDelegate == null)) {
                this.onEndUpdateChangeoverDelegate = new EndOperationDelegate(this.OnEndUpdateChangeover);
            }
            if ((this.onUpdateChangeoverCompletedDelegate == null)) {
                this.onUpdateChangeoverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateChangeoverCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateChangeoverDelegate, new object[] {
                        changeover}, this.onEndUpdateChangeoverDelegate, this.onUpdateChangeoverCompletedDelegate, userState);
        }
        
        public HA.MVVMClient.DataService.Work TransferChangeover(long dateID, int changeoverID) {
            return base.Channel.TransferChangeover(dateID, changeoverID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTransferChangeover(long dateID, int changeoverID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransferChangeover(dateID, changeoverID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HA.MVVMClient.DataService.Work EndTransferChangeover(System.IAsyncResult result) {
            return base.Channel.EndTransferChangeover(result);
        }
        
        private System.IAsyncResult OnBeginTransferChangeover(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long dateID = ((long)(inValues[0]));
            int changeoverID = ((int)(inValues[1]));
            return this.BeginTransferChangeover(dateID, changeoverID, callback, asyncState);
        }
        
        private object[] OnEndTransferChangeover(System.IAsyncResult result) {
            HA.MVVMClient.DataService.Work retVal = this.EndTransferChangeover(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransferChangeoverCompleted(object state) {
            if ((this.TransferChangeoverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransferChangeoverCompleted(this, new TransferChangeoverCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransferChangeoverAsync(long dateID, int changeoverID) {
            this.TransferChangeoverAsync(dateID, changeoverID, null);
        }
        
        public void TransferChangeoverAsync(long dateID, int changeoverID, object userState) {
            if ((this.onBeginTransferChangeoverDelegate == null)) {
                this.onBeginTransferChangeoverDelegate = new BeginOperationDelegate(this.OnBeginTransferChangeover);
            }
            if ((this.onEndTransferChangeoverDelegate == null)) {
                this.onEndTransferChangeoverDelegate = new EndOperationDelegate(this.OnEndTransferChangeover);
            }
            if ((this.onTransferChangeoverCompletedDelegate == null)) {
                this.onTransferChangeoverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransferChangeoverCompleted);
            }
            base.InvokeAsync(this.onBeginTransferChangeoverDelegate, new object[] {
                        dateID,
                        changeoverID}, this.onEndTransferChangeoverDelegate, this.onTransferChangeoverCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> FindChangeovers(int detachmentID) {
            return base.Channel.FindChangeovers(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindChangeovers(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindChangeovers(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> EndFindChangeovers(System.IAsyncResult result) {
            return base.Channel.EndFindChangeovers(result);
        }
        
        private System.IAsyncResult OnBeginFindChangeovers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindChangeovers(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindChangeovers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Changeover> retVal = this.EndFindChangeovers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindChangeoversCompleted(object state) {
            if ((this.FindChangeoversCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindChangeoversCompleted(this, new FindChangeoversCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindChangeoversAsync(int detachmentID) {
            this.FindChangeoversAsync(detachmentID, null);
        }
        
        public void FindChangeoversAsync(int detachmentID, object userState) {
            if ((this.onBeginFindChangeoversDelegate == null)) {
                this.onBeginFindChangeoversDelegate = new BeginOperationDelegate(this.OnBeginFindChangeovers);
            }
            if ((this.onEndFindChangeoversDelegate == null)) {
                this.onEndFindChangeoversDelegate = new EndOperationDelegate(this.OnEndFindChangeovers);
            }
            if ((this.onFindChangeoversCompletedDelegate == null)) {
                this.onFindChangeoversCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindChangeoversCompleted);
            }
            base.InvokeAsync(this.onBeginFindChangeoversDelegate, new object[] {
                        detachmentID}, this.onEndFindChangeoversDelegate, this.onFindChangeoversCompletedDelegate, userState);
        }
        
        public int AddDetachment(HA.MVVMClient.DataService.Detachment detachment) {
            return base.Channel.AddDetachment(detachment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddDetachment(HA.MVVMClient.DataService.Detachment detachment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDetachment(detachment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddDetachment(System.IAsyncResult result) {
            return base.Channel.EndAddDetachment(result);
        }
        
        private System.IAsyncResult OnBeginAddDetachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Detachment detachment = ((HA.MVVMClient.DataService.Detachment)(inValues[0]));
            return this.BeginAddDetachment(detachment, callback, asyncState);
        }
        
        private object[] OnEndAddDetachment(System.IAsyncResult result) {
            int retVal = this.EndAddDetachment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDetachmentCompleted(object state) {
            if ((this.AddDetachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDetachmentCompleted(this, new AddDetachmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDetachmentAsync(HA.MVVMClient.DataService.Detachment detachment) {
            this.AddDetachmentAsync(detachment, null);
        }
        
        public void AddDetachmentAsync(HA.MVVMClient.DataService.Detachment detachment, object userState) {
            if ((this.onBeginAddDetachmentDelegate == null)) {
                this.onBeginAddDetachmentDelegate = new BeginOperationDelegate(this.OnBeginAddDetachment);
            }
            if ((this.onEndAddDetachmentDelegate == null)) {
                this.onEndAddDetachmentDelegate = new EndOperationDelegate(this.OnEndAddDetachment);
            }
            if ((this.onAddDetachmentCompletedDelegate == null)) {
                this.onAddDetachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDetachmentCompleted);
            }
            base.InvokeAsync(this.onBeginAddDetachmentDelegate, new object[] {
                        detachment}, this.onEndAddDetachmentDelegate, this.onAddDetachmentCompletedDelegate, userState);
        }
        
        public void DeleteDetachment(int detachmentID) {
            base.Channel.DeleteDetachment(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteDetachment(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDetachment(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteDetachment(System.IAsyncResult result) {
            base.Channel.EndDeleteDetachment(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDetachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginDeleteDetachment(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndDeleteDetachment(System.IAsyncResult result) {
            this.EndDeleteDetachment(result);
            return null;
        }
        
        private void OnDeleteDetachmentCompleted(object state) {
            if ((this.DeleteDetachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDetachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDetachmentAsync(int detachmentID) {
            this.DeleteDetachmentAsync(detachmentID, null);
        }
        
        public void DeleteDetachmentAsync(int detachmentID, object userState) {
            if ((this.onBeginDeleteDetachmentDelegate == null)) {
                this.onBeginDeleteDetachmentDelegate = new BeginOperationDelegate(this.OnBeginDeleteDetachment);
            }
            if ((this.onEndDeleteDetachmentDelegate == null)) {
                this.onEndDeleteDetachmentDelegate = new EndOperationDelegate(this.OnEndDeleteDetachment);
            }
            if ((this.onDeleteDetachmentCompletedDelegate == null)) {
                this.onDeleteDetachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDetachmentCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDetachmentDelegate, new object[] {
                        detachmentID}, this.onEndDeleteDetachmentDelegate, this.onDeleteDetachmentCompletedDelegate, userState);
        }
        
        public void UpdateDetachment(HA.MVVMClient.DataService.Detachment detachment) {
            base.Channel.UpdateDetachment(detachment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateDetachment(HA.MVVMClient.DataService.Detachment detachment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDetachment(detachment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateDetachment(System.IAsyncResult result) {
            base.Channel.EndUpdateDetachment(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDetachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Detachment detachment = ((HA.MVVMClient.DataService.Detachment)(inValues[0]));
            return this.BeginUpdateDetachment(detachment, callback, asyncState);
        }
        
        private object[] OnEndUpdateDetachment(System.IAsyncResult result) {
            this.EndUpdateDetachment(result);
            return null;
        }
        
        private void OnUpdateDetachmentCompleted(object state) {
            if ((this.UpdateDetachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDetachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDetachmentAsync(HA.MVVMClient.DataService.Detachment detachment) {
            this.UpdateDetachmentAsync(detachment, null);
        }
        
        public void UpdateDetachmentAsync(HA.MVVMClient.DataService.Detachment detachment, object userState) {
            if ((this.onBeginUpdateDetachmentDelegate == null)) {
                this.onBeginUpdateDetachmentDelegate = new BeginOperationDelegate(this.OnBeginUpdateDetachment);
            }
            if ((this.onEndUpdateDetachmentDelegate == null)) {
                this.onEndUpdateDetachmentDelegate = new EndOperationDelegate(this.OnEndUpdateDetachment);
            }
            if ((this.onUpdateDetachmentCompletedDelegate == null)) {
                this.onUpdateDetachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDetachmentCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDetachmentDelegate, new object[] {
                        detachment}, this.onEndUpdateDetachmentDelegate, this.onUpdateDetachmentCompletedDelegate, userState);
        }
        
        public HA.MVVMClient.DataService.Detachment FindDetachment(int detachmentID) {
            return base.Channel.FindDetachment(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindDetachment(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindDetachment(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HA.MVVMClient.DataService.Detachment EndFindDetachment(System.IAsyncResult result) {
            return base.Channel.EndFindDetachment(result);
        }
        
        private System.IAsyncResult OnBeginFindDetachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindDetachment(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindDetachment(System.IAsyncResult result) {
            HA.MVVMClient.DataService.Detachment retVal = this.EndFindDetachment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindDetachmentCompleted(object state) {
            if ((this.FindDetachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindDetachmentCompleted(this, new FindDetachmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindDetachmentAsync(int detachmentID) {
            this.FindDetachmentAsync(detachmentID, null);
        }
        
        public void FindDetachmentAsync(int detachmentID, object userState) {
            if ((this.onBeginFindDetachmentDelegate == null)) {
                this.onBeginFindDetachmentDelegate = new BeginOperationDelegate(this.OnBeginFindDetachment);
            }
            if ((this.onEndFindDetachmentDelegate == null)) {
                this.onEndFindDetachmentDelegate = new EndOperationDelegate(this.OnEndFindDetachment);
            }
            if ((this.onFindDetachmentCompletedDelegate == null)) {
                this.onFindDetachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindDetachmentCompleted);
            }
            base.InvokeAsync(this.onBeginFindDetachmentDelegate, new object[] {
                        detachmentID}, this.onEndFindDetachmentDelegate, this.onFindDetachmentCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> GetDetachments() {
            return base.Channel.GetDetachments();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDetachments(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDetachments(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> EndGetDetachments(System.IAsyncResult result) {
            return base.Channel.EndGetDetachments(result);
        }
        
        private System.IAsyncResult OnBeginGetDetachments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDetachments(callback, asyncState);
        }
        
        private object[] OnEndGetDetachments(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Detachment> retVal = this.EndGetDetachments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDetachmentsCompleted(object state) {
            if ((this.GetDetachmentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDetachmentsCompleted(this, new GetDetachmentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDetachmentsAsync() {
            this.GetDetachmentsAsync(null);
        }
        
        public void GetDetachmentsAsync(object userState) {
            if ((this.onBeginGetDetachmentsDelegate == null)) {
                this.onBeginGetDetachmentsDelegate = new BeginOperationDelegate(this.OnBeginGetDetachments);
            }
            if ((this.onEndGetDetachmentsDelegate == null)) {
                this.onEndGetDetachmentsDelegate = new EndOperationDelegate(this.OnEndGetDetachments);
            }
            if ((this.onGetDetachmentsCompletedDelegate == null)) {
                this.onGetDetachmentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDetachmentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDetachmentsDelegate, null, this.onEndGetDetachmentsDelegate, this.onGetDetachmentsCompletedDelegate, userState);
        }
        
        public int AddTour(HA.MVVMClient.DataService.Tour tour) {
            return base.Channel.AddTour(tour);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTour(HA.MVVMClient.DataService.Tour tour, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTour(tour, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddTour(System.IAsyncResult result) {
            return base.Channel.EndAddTour(result);
        }
        
        private System.IAsyncResult OnBeginAddTour(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Tour tour = ((HA.MVVMClient.DataService.Tour)(inValues[0]));
            return this.BeginAddTour(tour, callback, asyncState);
        }
        
        private object[] OnEndAddTour(System.IAsyncResult result) {
            int retVal = this.EndAddTour(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTourCompleted(object state) {
            if ((this.AddTourCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTourCompleted(this, new AddTourCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTourAsync(HA.MVVMClient.DataService.Tour tour) {
            this.AddTourAsync(tour, null);
        }
        
        public void AddTourAsync(HA.MVVMClient.DataService.Tour tour, object userState) {
            if ((this.onBeginAddTourDelegate == null)) {
                this.onBeginAddTourDelegate = new BeginOperationDelegate(this.OnBeginAddTour);
            }
            if ((this.onEndAddTourDelegate == null)) {
                this.onEndAddTourDelegate = new EndOperationDelegate(this.OnEndAddTour);
            }
            if ((this.onAddTourCompletedDelegate == null)) {
                this.onAddTourCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTourCompleted);
            }
            base.InvokeAsync(this.onBeginAddTourDelegate, new object[] {
                        tour}, this.onEndAddTourDelegate, this.onAddTourCompletedDelegate, userState);
        }
        
        public void DeleteTour(int tourID) {
            base.Channel.DeleteTour(tourID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteTour(int tourID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTour(tourID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteTour(System.IAsyncResult result) {
            base.Channel.EndDeleteTour(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTour(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tourID = ((int)(inValues[0]));
            return this.BeginDeleteTour(tourID, callback, asyncState);
        }
        
        private object[] OnEndDeleteTour(System.IAsyncResult result) {
            this.EndDeleteTour(result);
            return null;
        }
        
        private void OnDeleteTourCompleted(object state) {
            if ((this.DeleteTourCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTourCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTourAsync(int tourID) {
            this.DeleteTourAsync(tourID, null);
        }
        
        public void DeleteTourAsync(int tourID, object userState) {
            if ((this.onBeginDeleteTourDelegate == null)) {
                this.onBeginDeleteTourDelegate = new BeginOperationDelegate(this.OnBeginDeleteTour);
            }
            if ((this.onEndDeleteTourDelegate == null)) {
                this.onEndDeleteTourDelegate = new EndOperationDelegate(this.OnEndDeleteTour);
            }
            if ((this.onDeleteTourCompletedDelegate == null)) {
                this.onDeleteTourCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTourCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTourDelegate, new object[] {
                        tourID}, this.onEndDeleteTourDelegate, this.onDeleteTourCompletedDelegate, userState);
        }
        
        public void UpdateTour(HA.MVVMClient.DataService.Tour tour) {
            base.Channel.UpdateTour(tour);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTour(HA.MVVMClient.DataService.Tour tour, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTour(tour, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTour(System.IAsyncResult result) {
            base.Channel.EndUpdateTour(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTour(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Tour tour = ((HA.MVVMClient.DataService.Tour)(inValues[0]));
            return this.BeginUpdateTour(tour, callback, asyncState);
        }
        
        private object[] OnEndUpdateTour(System.IAsyncResult result) {
            this.EndUpdateTour(result);
            return null;
        }
        
        private void OnUpdateTourCompleted(object state) {
            if ((this.UpdateTourCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTourCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTourAsync(HA.MVVMClient.DataService.Tour tour) {
            this.UpdateTourAsync(tour, null);
        }
        
        public void UpdateTourAsync(HA.MVVMClient.DataService.Tour tour, object userState) {
            if ((this.onBeginUpdateTourDelegate == null)) {
                this.onBeginUpdateTourDelegate = new BeginOperationDelegate(this.OnBeginUpdateTour);
            }
            if ((this.onEndUpdateTourDelegate == null)) {
                this.onEndUpdateTourDelegate = new EndOperationDelegate(this.OnEndUpdateTour);
            }
            if ((this.onUpdateTourCompletedDelegate == null)) {
                this.onUpdateTourCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTourCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTourDelegate, new object[] {
                        tour}, this.onEndUpdateTourDelegate, this.onUpdateTourCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> FindTours(int detachmentID) {
            return base.Channel.FindTours(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindTours(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindTours(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> EndFindTours(System.IAsyncResult result) {
            return base.Channel.EndFindTours(result);
        }
        
        private System.IAsyncResult OnBeginFindTours(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindTours(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindTours(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Tour> retVal = this.EndFindTours(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindToursCompleted(object state) {
            if ((this.FindToursCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindToursCompleted(this, new FindToursCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindToursAsync(int detachmentID) {
            this.FindToursAsync(detachmentID, null);
        }
        
        public void FindToursAsync(int detachmentID, object userState) {
            if ((this.onBeginFindToursDelegate == null)) {
                this.onBeginFindToursDelegate = new BeginOperationDelegate(this.OnBeginFindTours);
            }
            if ((this.onEndFindToursDelegate == null)) {
                this.onEndFindToursDelegate = new EndOperationDelegate(this.OnEndFindTours);
            }
            if ((this.onFindToursCompletedDelegate == null)) {
                this.onFindToursCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindToursCompleted);
            }
            base.InvokeAsync(this.onBeginFindToursDelegate, new object[] {
                        detachmentID}, this.onEndFindToursDelegate, this.onFindToursCompletedDelegate, userState);
        }
        
        public int AddVehicle(HA.MVVMClient.DataService.Vehicle vehicle) {
            return base.Channel.AddVehicle(vehicle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddVehicle(HA.MVVMClient.DataService.Vehicle vehicle, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddVehicle(vehicle, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddVehicle(System.IAsyncResult result) {
            return base.Channel.EndAddVehicle(result);
        }
        
        private System.IAsyncResult OnBeginAddVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Vehicle vehicle = ((HA.MVVMClient.DataService.Vehicle)(inValues[0]));
            return this.BeginAddVehicle(vehicle, callback, asyncState);
        }
        
        private object[] OnEndAddVehicle(System.IAsyncResult result) {
            int retVal = this.EndAddVehicle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddVehicleCompleted(object state) {
            if ((this.AddVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddVehicleCompleted(this, new AddVehicleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddVehicleAsync(HA.MVVMClient.DataService.Vehicle vehicle) {
            this.AddVehicleAsync(vehicle, null);
        }
        
        public void AddVehicleAsync(HA.MVVMClient.DataService.Vehicle vehicle, object userState) {
            if ((this.onBeginAddVehicleDelegate == null)) {
                this.onBeginAddVehicleDelegate = new BeginOperationDelegate(this.OnBeginAddVehicle);
            }
            if ((this.onEndAddVehicleDelegate == null)) {
                this.onEndAddVehicleDelegate = new EndOperationDelegate(this.OnEndAddVehicle);
            }
            if ((this.onAddVehicleCompletedDelegate == null)) {
                this.onAddVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginAddVehicleDelegate, new object[] {
                        vehicle}, this.onEndAddVehicleDelegate, this.onAddVehicleCompletedDelegate, userState);
        }
        
        public void DeleteVehicle(int vehicleID) {
            base.Channel.DeleteVehicle(vehicleID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteVehicle(int vehicleID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteVehicle(vehicleID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteVehicle(System.IAsyncResult result) {
            base.Channel.EndDeleteVehicle(result);
        }
        
        private System.IAsyncResult OnBeginDeleteVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int vehicleID = ((int)(inValues[0]));
            return this.BeginDeleteVehicle(vehicleID, callback, asyncState);
        }
        
        private object[] OnEndDeleteVehicle(System.IAsyncResult result) {
            this.EndDeleteVehicle(result);
            return null;
        }
        
        private void OnDeleteVehicleCompleted(object state) {
            if ((this.DeleteVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteVehicleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteVehicleAsync(int vehicleID) {
            this.DeleteVehicleAsync(vehicleID, null);
        }
        
        public void DeleteVehicleAsync(int vehicleID, object userState) {
            if ((this.onBeginDeleteVehicleDelegate == null)) {
                this.onBeginDeleteVehicleDelegate = new BeginOperationDelegate(this.OnBeginDeleteVehicle);
            }
            if ((this.onEndDeleteVehicleDelegate == null)) {
                this.onEndDeleteVehicleDelegate = new EndOperationDelegate(this.OnEndDeleteVehicle);
            }
            if ((this.onDeleteVehicleCompletedDelegate == null)) {
                this.onDeleteVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteVehicleDelegate, new object[] {
                        vehicleID}, this.onEndDeleteVehicleDelegate, this.onDeleteVehicleCompletedDelegate, userState);
        }
        
        public void UpdateVehicle(HA.MVVMClient.DataService.Vehicle vehicle) {
            base.Channel.UpdateVehicle(vehicle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateVehicle(HA.MVVMClient.DataService.Vehicle vehicle, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateVehicle(vehicle, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateVehicle(System.IAsyncResult result) {
            base.Channel.EndUpdateVehicle(result);
        }
        
        private System.IAsyncResult OnBeginUpdateVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Vehicle vehicle = ((HA.MVVMClient.DataService.Vehicle)(inValues[0]));
            return this.BeginUpdateVehicle(vehicle, callback, asyncState);
        }
        
        private object[] OnEndUpdateVehicle(System.IAsyncResult result) {
            this.EndUpdateVehicle(result);
            return null;
        }
        
        private void OnUpdateVehicleCompleted(object state) {
            if ((this.UpdateVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateVehicleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateVehicleAsync(HA.MVVMClient.DataService.Vehicle vehicle) {
            this.UpdateVehicleAsync(vehicle, null);
        }
        
        public void UpdateVehicleAsync(HA.MVVMClient.DataService.Vehicle vehicle, object userState) {
            if ((this.onBeginUpdateVehicleDelegate == null)) {
                this.onBeginUpdateVehicleDelegate = new BeginOperationDelegate(this.OnBeginUpdateVehicle);
            }
            if ((this.onEndUpdateVehicleDelegate == null)) {
                this.onEndUpdateVehicleDelegate = new EndOperationDelegate(this.OnEndUpdateVehicle);
            }
            if ((this.onUpdateVehicleCompletedDelegate == null)) {
                this.onUpdateVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateVehicleDelegate, new object[] {
                        vehicle}, this.onEndUpdateVehicleDelegate, this.onUpdateVehicleCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> FindVehicles(int detachmentID) {
            return base.Channel.FindVehicles(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindVehicles(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindVehicles(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> EndFindVehicles(System.IAsyncResult result) {
            return base.Channel.EndFindVehicles(result);
        }
        
        private System.IAsyncResult OnBeginFindVehicles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindVehicles(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindVehicles(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Vehicle> retVal = this.EndFindVehicles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindVehiclesCompleted(object state) {
            if ((this.FindVehiclesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindVehiclesCompleted(this, new FindVehiclesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindVehiclesAsync(int detachmentID) {
            this.FindVehiclesAsync(detachmentID, null);
        }
        
        public void FindVehiclesAsync(int detachmentID, object userState) {
            if ((this.onBeginFindVehiclesDelegate == null)) {
                this.onBeginFindVehiclesDelegate = new BeginOperationDelegate(this.OnBeginFindVehicles);
            }
            if ((this.onEndFindVehiclesDelegate == null)) {
                this.onEndFindVehiclesDelegate = new EndOperationDelegate(this.OnEndFindVehicles);
            }
            if ((this.onFindVehiclesCompletedDelegate == null)) {
                this.onFindVehiclesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindVehiclesCompleted);
            }
            base.InvokeAsync(this.onBeginFindVehiclesDelegate, new object[] {
                        detachmentID}, this.onEndFindVehiclesDelegate, this.onFindVehiclesCompletedDelegate, userState);
        }
        
        public long AddWork(HA.MVVMClient.DataService.Work work) {
            return base.Channel.AddWork(work);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddWork(HA.MVVMClient.DataService.Work work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWork(work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndAddWork(System.IAsyncResult result) {
            return base.Channel.EndAddWork(result);
        }
        
        private System.IAsyncResult OnBeginAddWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Work work = ((HA.MVVMClient.DataService.Work)(inValues[0]));
            return this.BeginAddWork(work, callback, asyncState);
        }
        
        private object[] OnEndAddWork(System.IAsyncResult result) {
            long retVal = this.EndAddWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkCompleted(object state) {
            if ((this.AddWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkCompleted(this, new AddWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkAsync(HA.MVVMClient.DataService.Work work) {
            this.AddWorkAsync(work, null);
        }
        
        public void AddWorkAsync(HA.MVVMClient.DataService.Work work, object userState) {
            if ((this.onBeginAddWorkDelegate == null)) {
                this.onBeginAddWorkDelegate = new BeginOperationDelegate(this.OnBeginAddWork);
            }
            if ((this.onEndAddWorkDelegate == null)) {
                this.onEndAddWorkDelegate = new EndOperationDelegate(this.OnEndAddWork);
            }
            if ((this.onAddWorkCompletedDelegate == null)) {
                this.onAddWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkDelegate, new object[] {
                        work}, this.onEndAddWorkDelegate, this.onAddWorkCompletedDelegate, userState);
        }
        
        public void DeleteWork(long workID) {
            base.Channel.DeleteWork(workID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteWork(long workID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWork(workID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteWork(System.IAsyncResult result) {
            base.Channel.EndDeleteWork(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long workID = ((long)(inValues[0]));
            return this.BeginDeleteWork(workID, callback, asyncState);
        }
        
        private object[] OnEndDeleteWork(System.IAsyncResult result) {
            this.EndDeleteWork(result);
            return null;
        }
        
        private void OnDeleteWorkCompleted(object state) {
            if ((this.DeleteWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkAsync(long workID) {
            this.DeleteWorkAsync(workID, null);
        }
        
        public void DeleteWorkAsync(long workID, object userState) {
            if ((this.onBeginDeleteWorkDelegate == null)) {
                this.onBeginDeleteWorkDelegate = new BeginOperationDelegate(this.OnBeginDeleteWork);
            }
            if ((this.onEndDeleteWorkDelegate == null)) {
                this.onEndDeleteWorkDelegate = new EndOperationDelegate(this.OnEndDeleteWork);
            }
            if ((this.onDeleteWorkCompletedDelegate == null)) {
                this.onDeleteWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkDelegate, new object[] {
                        workID}, this.onEndDeleteWorkDelegate, this.onDeleteWorkCompletedDelegate, userState);
        }
        
        public void UpdateWork(HA.MVVMClient.DataService.Work work) {
            base.Channel.UpdateWork(work);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateWork(HA.MVVMClient.DataService.Work work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWork(work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateWork(System.IAsyncResult result) {
            base.Channel.EndUpdateWork(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.Work work = ((HA.MVVMClient.DataService.Work)(inValues[0]));
            return this.BeginUpdateWork(work, callback, asyncState);
        }
        
        private object[] OnEndUpdateWork(System.IAsyncResult result) {
            this.EndUpdateWork(result);
            return null;
        }
        
        private void OnUpdateWorkCompleted(object state) {
            if ((this.UpdateWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkAsync(HA.MVVMClient.DataService.Work work) {
            this.UpdateWorkAsync(work, null);
        }
        
        public void UpdateWorkAsync(HA.MVVMClient.DataService.Work work, object userState) {
            if ((this.onBeginUpdateWorkDelegate == null)) {
                this.onBeginUpdateWorkDelegate = new BeginOperationDelegate(this.OnBeginUpdateWork);
            }
            if ((this.onEndUpdateWorkDelegate == null)) {
                this.onEndUpdateWorkDelegate = new EndOperationDelegate(this.OnEndUpdateWork);
            }
            if ((this.onUpdateWorkCompletedDelegate == null)) {
                this.onUpdateWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkDelegate, new object[] {
                        work}, this.onEndUpdateWorkDelegate, this.onUpdateWorkCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> FindWorks(long dateID) {
            return base.Channel.FindWorks(dateID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindWorks(long dateID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindWorks(dateID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> EndFindWorks(System.IAsyncResult result) {
            return base.Channel.EndFindWorks(result);
        }
        
        private System.IAsyncResult OnBeginFindWorks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long dateID = ((long)(inValues[0]));
            return this.BeginFindWorks(dateID, callback, asyncState);
        }
        
        private object[] OnEndFindWorks(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Work> retVal = this.EndFindWorks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindWorksCompleted(object state) {
            if ((this.FindWorksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindWorksCompleted(this, new FindWorksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindWorksAsync(long dateID) {
            this.FindWorksAsync(dateID, null);
        }
        
        public void FindWorksAsync(long dateID, object userState) {
            if ((this.onBeginFindWorksDelegate == null)) {
                this.onBeginFindWorksDelegate = new BeginOperationDelegate(this.OnBeginFindWorks);
            }
            if ((this.onEndFindWorksDelegate == null)) {
                this.onEndFindWorksDelegate = new EndOperationDelegate(this.OnEndFindWorks);
            }
            if ((this.onFindWorksCompletedDelegate == null)) {
                this.onFindWorksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindWorksCompleted);
            }
            base.InvokeAsync(this.onBeginFindWorksDelegate, new object[] {
                        dateID}, this.onEndFindWorksDelegate, this.onFindWorksCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> GetTopFaultWorks(int count, int detachmentID) {
            return base.Channel.GetTopFaultWorks(count, detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTopFaultWorks(int count, int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTopFaultWorks(count, detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<string> EndGetTopFaultWorks(System.IAsyncResult result) {
            return base.Channel.EndGetTopFaultWorks(result);
        }
        
        private System.IAsyncResult OnBeginGetTopFaultWorks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int count = ((int)(inValues[0]));
            int detachmentID = ((int)(inValues[1]));
            return this.BeginGetTopFaultWorks(count, detachmentID, callback, asyncState);
        }
        
        private object[] OnEndGetTopFaultWorks(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = this.EndGetTopFaultWorks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTopFaultWorksCompleted(object state) {
            if ((this.GetTopFaultWorksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTopFaultWorksCompleted(this, new GetTopFaultWorksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTopFaultWorksAsync(int count, int detachmentID) {
            this.GetTopFaultWorksAsync(count, detachmentID, null);
        }
        
        public void GetTopFaultWorksAsync(int count, int detachmentID, object userState) {
            if ((this.onBeginGetTopFaultWorksDelegate == null)) {
                this.onBeginGetTopFaultWorksDelegate = new BeginOperationDelegate(this.OnBeginGetTopFaultWorks);
            }
            if ((this.onEndGetTopFaultWorksDelegate == null)) {
                this.onEndGetTopFaultWorksDelegate = new EndOperationDelegate(this.OnEndGetTopFaultWorks);
            }
            if ((this.onGetTopFaultWorksCompletedDelegate == null)) {
                this.onGetTopFaultWorksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTopFaultWorksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTopFaultWorksDelegate, new object[] {
                        count,
                        detachmentID}, this.onEndGetTopFaultWorksDelegate, this.onGetTopFaultWorksCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> GetTopCauseWorks(int count, int detachmentID) {
            return base.Channel.GetTopCauseWorks(count, detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTopCauseWorks(int count, int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTopCauseWorks(count, detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<string> EndGetTopCauseWorks(System.IAsyncResult result) {
            return base.Channel.EndGetTopCauseWorks(result);
        }
        
        private System.IAsyncResult OnBeginGetTopCauseWorks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int count = ((int)(inValues[0]));
            int detachmentID = ((int)(inValues[1]));
            return this.BeginGetTopCauseWorks(count, detachmentID, callback, asyncState);
        }
        
        private object[] OnEndGetTopCauseWorks(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = this.EndGetTopCauseWorks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTopCauseWorksCompleted(object state) {
            if ((this.GetTopCauseWorksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTopCauseWorksCompleted(this, new GetTopCauseWorksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTopCauseWorksAsync(int count, int detachmentID) {
            this.GetTopCauseWorksAsync(count, detachmentID, null);
        }
        
        public void GetTopCauseWorksAsync(int count, int detachmentID, object userState) {
            if ((this.onBeginGetTopCauseWorksDelegate == null)) {
                this.onBeginGetTopCauseWorksDelegate = new BeginOperationDelegate(this.OnBeginGetTopCauseWorks);
            }
            if ((this.onEndGetTopCauseWorksDelegate == null)) {
                this.onEndGetTopCauseWorksDelegate = new EndOperationDelegate(this.OnEndGetTopCauseWorks);
            }
            if ((this.onGetTopCauseWorksCompletedDelegate == null)) {
                this.onGetTopCauseWorksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTopCauseWorksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTopCauseWorksDelegate, new object[] {
                        count,
                        detachmentID}, this.onEndGetTopCauseWorksDelegate, this.onGetTopCauseWorksCompletedDelegate, userState);
        }
        
        public int AddWorker(HA.MVVMClient.DataService.WorkerDetail worker) {
            return base.Channel.AddWorker(worker);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddWorker(HA.MVVMClient.DataService.WorkerDetail worker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorker(worker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddWorker(System.IAsyncResult result) {
            return base.Channel.EndAddWorker(result);
        }
        
        private System.IAsyncResult OnBeginAddWorker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkerDetail worker = ((HA.MVVMClient.DataService.WorkerDetail)(inValues[0]));
            return this.BeginAddWorker(worker, callback, asyncState);
        }
        
        private object[] OnEndAddWorker(System.IAsyncResult result) {
            int retVal = this.EndAddWorker(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkerCompleted(object state) {
            if ((this.AddWorkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkerCompleted(this, new AddWorkerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkerAsync(HA.MVVMClient.DataService.WorkerDetail worker) {
            this.AddWorkerAsync(worker, null);
        }
        
        public void AddWorkerAsync(HA.MVVMClient.DataService.WorkerDetail worker, object userState) {
            if ((this.onBeginAddWorkerDelegate == null)) {
                this.onBeginAddWorkerDelegate = new BeginOperationDelegate(this.OnBeginAddWorker);
            }
            if ((this.onEndAddWorkerDelegate == null)) {
                this.onEndAddWorkerDelegate = new EndOperationDelegate(this.OnEndAddWorker);
            }
            if ((this.onAddWorkerCompletedDelegate == null)) {
                this.onAddWorkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkerCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkerDelegate, new object[] {
                        worker}, this.onEndAddWorkerDelegate, this.onAddWorkerCompletedDelegate, userState);
        }
        
        public void DeleteWorker(int workerID) {
            base.Channel.DeleteWorker(workerID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteWorker(int workerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorker(workerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteWorker(System.IAsyncResult result) {
            base.Channel.EndDeleteWorker(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int workerID = ((int)(inValues[0]));
            return this.BeginDeleteWorker(workerID, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorker(System.IAsyncResult result) {
            this.EndDeleteWorker(result);
            return null;
        }
        
        private void OnDeleteWorkerCompleted(object state) {
            if ((this.DeleteWorkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkerAsync(int workerID) {
            this.DeleteWorkerAsync(workerID, null);
        }
        
        public void DeleteWorkerAsync(int workerID, object userState) {
            if ((this.onBeginDeleteWorkerDelegate == null)) {
                this.onBeginDeleteWorkerDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorker);
            }
            if ((this.onEndDeleteWorkerDelegate == null)) {
                this.onEndDeleteWorkerDelegate = new EndOperationDelegate(this.OnEndDeleteWorker);
            }
            if ((this.onDeleteWorkerCompletedDelegate == null)) {
                this.onDeleteWorkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkerCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkerDelegate, new object[] {
                        workerID}, this.onEndDeleteWorkerDelegate, this.onDeleteWorkerCompletedDelegate, userState);
        }
        
        public void UpdateWorker(HA.MVVMClient.DataService.WorkerDetail worker) {
            base.Channel.UpdateWorker(worker);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateWorker(HA.MVVMClient.DataService.WorkerDetail worker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWorker(worker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateWorker(System.IAsyncResult result) {
            base.Channel.EndUpdateWorker(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWorker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkerDetail worker = ((HA.MVVMClient.DataService.WorkerDetail)(inValues[0]));
            return this.BeginUpdateWorker(worker, callback, asyncState);
        }
        
        private object[] OnEndUpdateWorker(System.IAsyncResult result) {
            this.EndUpdateWorker(result);
            return null;
        }
        
        private void OnUpdateWorkerCompleted(object state) {
            if ((this.UpdateWorkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkerAsync(HA.MVVMClient.DataService.WorkerDetail worker) {
            this.UpdateWorkerAsync(worker, null);
        }
        
        public void UpdateWorkerAsync(HA.MVVMClient.DataService.WorkerDetail worker, object userState) {
            if ((this.onBeginUpdateWorkerDelegate == null)) {
                this.onBeginUpdateWorkerDelegate = new BeginOperationDelegate(this.OnBeginUpdateWorker);
            }
            if ((this.onEndUpdateWorkerDelegate == null)) {
                this.onEndUpdateWorkerDelegate = new EndOperationDelegate(this.OnEndUpdateWorker);
            }
            if ((this.onUpdateWorkerCompletedDelegate == null)) {
                this.onUpdateWorkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkerDelegate, new object[] {
                        worker}, this.onEndUpdateWorkerDelegate, this.onUpdateWorkerCompletedDelegate, userState);
        }
        
        public HA.MVVMClient.DataService.WorkerDetail FindWorker(int workerID) {
            return base.Channel.FindWorker(workerID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindWorker(int workerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindWorker(workerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HA.MVVMClient.DataService.WorkerDetail EndFindWorker(System.IAsyncResult result) {
            return base.Channel.EndFindWorker(result);
        }
        
        private System.IAsyncResult OnBeginFindWorker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int workerID = ((int)(inValues[0]));
            return this.BeginFindWorker(workerID, callback, asyncState);
        }
        
        private object[] OnEndFindWorker(System.IAsyncResult result) {
            HA.MVVMClient.DataService.WorkerDetail retVal = this.EndFindWorker(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindWorkerCompleted(object state) {
            if ((this.FindWorkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindWorkerCompleted(this, new FindWorkerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindWorkerAsync(int workerID) {
            this.FindWorkerAsync(workerID, null);
        }
        
        public void FindWorkerAsync(int workerID, object userState) {
            if ((this.onBeginFindWorkerDelegate == null)) {
                this.onBeginFindWorkerDelegate = new BeginOperationDelegate(this.OnBeginFindWorker);
            }
            if ((this.onEndFindWorkerDelegate == null)) {
                this.onEndFindWorkerDelegate = new EndOperationDelegate(this.OnEndFindWorker);
            }
            if ((this.onFindWorkerCompletedDelegate == null)) {
                this.onFindWorkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindWorkerCompleted);
            }
            base.InvokeAsync(this.onBeginFindWorkerDelegate, new object[] {
                        workerID}, this.onEndFindWorkerDelegate, this.onFindWorkerCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> FindWorkers(int detachmentID) {
            return base.Channel.FindWorkers(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindWorkers(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindWorkers(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> EndFindWorkers(System.IAsyncResult result) {
            return base.Channel.EndFindWorkers(result);
        }
        
        private System.IAsyncResult OnBeginFindWorkers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindWorkers(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindWorkers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.Worker> retVal = this.EndFindWorkers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindWorkersCompleted(object state) {
            if ((this.FindWorkersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindWorkersCompleted(this, new FindWorkersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindWorkersAsync(int detachmentID) {
            this.FindWorkersAsync(detachmentID, null);
        }
        
        public void FindWorkersAsync(int detachmentID, object userState) {
            if ((this.onBeginFindWorkersDelegate == null)) {
                this.onBeginFindWorkersDelegate = new BeginOperationDelegate(this.OnBeginFindWorkers);
            }
            if ((this.onEndFindWorkersDelegate == null)) {
                this.onEndFindWorkersDelegate = new EndOperationDelegate(this.OnEndFindWorkers);
            }
            if ((this.onFindWorkersCompletedDelegate == null)) {
                this.onFindWorkersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindWorkersCompleted);
            }
            base.InvokeAsync(this.onBeginFindWorkersDelegate, new object[] {
                        detachmentID}, this.onEndFindWorkersDelegate, this.onFindWorkersCompletedDelegate, userState);
        }
        
        public int AddWorkerState(HA.MVVMClient.DataService.WorkerState workerState) {
            return base.Channel.AddWorkerState(workerState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddWorkerState(HA.MVVMClient.DataService.WorkerState workerState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorkerState(workerState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddWorkerState(System.IAsyncResult result) {
            return base.Channel.EndAddWorkerState(result);
        }
        
        private System.IAsyncResult OnBeginAddWorkerState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkerState workerState = ((HA.MVVMClient.DataService.WorkerState)(inValues[0]));
            return this.BeginAddWorkerState(workerState, callback, asyncState);
        }
        
        private object[] OnEndAddWorkerState(System.IAsyncResult result) {
            int retVal = this.EndAddWorkerState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkerStateCompleted(object state) {
            if ((this.AddWorkerStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkerStateCompleted(this, new AddWorkerStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkerStateAsync(HA.MVVMClient.DataService.WorkerState workerState) {
            this.AddWorkerStateAsync(workerState, null);
        }
        
        public void AddWorkerStateAsync(HA.MVVMClient.DataService.WorkerState workerState, object userState) {
            if ((this.onBeginAddWorkerStateDelegate == null)) {
                this.onBeginAddWorkerStateDelegate = new BeginOperationDelegate(this.OnBeginAddWorkerState);
            }
            if ((this.onEndAddWorkerStateDelegate == null)) {
                this.onEndAddWorkerStateDelegate = new EndOperationDelegate(this.OnEndAddWorkerState);
            }
            if ((this.onAddWorkerStateCompletedDelegate == null)) {
                this.onAddWorkerStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkerStateCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkerStateDelegate, new object[] {
                        workerState}, this.onEndAddWorkerStateDelegate, this.onAddWorkerStateCompletedDelegate, userState);
        }
        
        public void DeleteWorkerState(int workerStateID) {
            base.Channel.DeleteWorkerState(workerStateID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteWorkerState(int workerStateID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorkerState(workerStateID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteWorkerState(System.IAsyncResult result) {
            base.Channel.EndDeleteWorkerState(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorkerState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int workerStateID = ((int)(inValues[0]));
            return this.BeginDeleteWorkerState(workerStateID, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorkerState(System.IAsyncResult result) {
            this.EndDeleteWorkerState(result);
            return null;
        }
        
        private void OnDeleteWorkerStateCompleted(object state) {
            if ((this.DeleteWorkerStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkerStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkerStateAsync(int workerStateID) {
            this.DeleteWorkerStateAsync(workerStateID, null);
        }
        
        public void DeleteWorkerStateAsync(int workerStateID, object userState) {
            if ((this.onBeginDeleteWorkerStateDelegate == null)) {
                this.onBeginDeleteWorkerStateDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorkerState);
            }
            if ((this.onEndDeleteWorkerStateDelegate == null)) {
                this.onEndDeleteWorkerStateDelegate = new EndOperationDelegate(this.OnEndDeleteWorkerState);
            }
            if ((this.onDeleteWorkerStateCompletedDelegate == null)) {
                this.onDeleteWorkerStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkerStateCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkerStateDelegate, new object[] {
                        workerStateID}, this.onEndDeleteWorkerStateDelegate, this.onDeleteWorkerStateCompletedDelegate, userState);
        }
        
        public void UpdateWorkerState(HA.MVVMClient.DataService.WorkerState workerState) {
            base.Channel.UpdateWorkerState(workerState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateWorkerState(HA.MVVMClient.DataService.WorkerState workerState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWorkerState(workerState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateWorkerState(System.IAsyncResult result) {
            base.Channel.EndUpdateWorkerState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWorkerState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkerState workerState = ((HA.MVVMClient.DataService.WorkerState)(inValues[0]));
            return this.BeginUpdateWorkerState(workerState, callback, asyncState);
        }
        
        private object[] OnEndUpdateWorkerState(System.IAsyncResult result) {
            this.EndUpdateWorkerState(result);
            return null;
        }
        
        private void OnUpdateWorkerStateCompleted(object state) {
            if ((this.UpdateWorkerStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkerStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkerStateAsync(HA.MVVMClient.DataService.WorkerState workerState) {
            this.UpdateWorkerStateAsync(workerState, null);
        }
        
        public void UpdateWorkerStateAsync(HA.MVVMClient.DataService.WorkerState workerState, object userState) {
            if ((this.onBeginUpdateWorkerStateDelegate == null)) {
                this.onBeginUpdateWorkerStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateWorkerState);
            }
            if ((this.onEndUpdateWorkerStateDelegate == null)) {
                this.onEndUpdateWorkerStateDelegate = new EndOperationDelegate(this.OnEndUpdateWorkerState);
            }
            if ((this.onUpdateWorkerStateCompletedDelegate == null)) {
                this.onUpdateWorkerStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkerStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkerStateDelegate, new object[] {
                        workerState}, this.onEndUpdateWorkerStateDelegate, this.onUpdateWorkerStateCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> FindWorkerStates(int detachmentID) {
            return base.Channel.FindWorkerStates(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindWorkerStates(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindWorkerStates(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> EndFindWorkerStates(System.IAsyncResult result) {
            return base.Channel.EndFindWorkerStates(result);
        }
        
        private System.IAsyncResult OnBeginFindWorkerStates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindWorkerStates(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindWorkerStates(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkerState> retVal = this.EndFindWorkerStates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindWorkerStatesCompleted(object state) {
            if ((this.FindWorkerStatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindWorkerStatesCompleted(this, new FindWorkerStatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindWorkerStatesAsync(int detachmentID) {
            this.FindWorkerStatesAsync(detachmentID, null);
        }
        
        public void FindWorkerStatesAsync(int detachmentID, object userState) {
            if ((this.onBeginFindWorkerStatesDelegate == null)) {
                this.onBeginFindWorkerStatesDelegate = new BeginOperationDelegate(this.OnBeginFindWorkerStates);
            }
            if ((this.onEndFindWorkerStatesDelegate == null)) {
                this.onEndFindWorkerStatesDelegate = new EndOperationDelegate(this.OnEndFindWorkerStates);
            }
            if ((this.onFindWorkerStatesCompletedDelegate == null)) {
                this.onFindWorkerStatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindWorkerStatesCompleted);
            }
            base.InvokeAsync(this.onBeginFindWorkerStatesDelegate, new object[] {
                        detachmentID}, this.onEndFindWorkerStatesDelegate, this.onFindWorkerStatesCompletedDelegate, userState);
        }
        
        public int AddWorkType(HA.MVVMClient.DataService.WorkType workType) {
            return base.Channel.AddWorkType(workType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddWorkType(HA.MVVMClient.DataService.WorkType workType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorkType(workType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddWorkType(System.IAsyncResult result) {
            return base.Channel.EndAddWorkType(result);
        }
        
        private System.IAsyncResult OnBeginAddWorkType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkType workType = ((HA.MVVMClient.DataService.WorkType)(inValues[0]));
            return this.BeginAddWorkType(workType, callback, asyncState);
        }
        
        private object[] OnEndAddWorkType(System.IAsyncResult result) {
            int retVal = this.EndAddWorkType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkTypeCompleted(object state) {
            if ((this.AddWorkTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkTypeCompleted(this, new AddWorkTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkTypeAsync(HA.MVVMClient.DataService.WorkType workType) {
            this.AddWorkTypeAsync(workType, null);
        }
        
        public void AddWorkTypeAsync(HA.MVVMClient.DataService.WorkType workType, object userState) {
            if ((this.onBeginAddWorkTypeDelegate == null)) {
                this.onBeginAddWorkTypeDelegate = new BeginOperationDelegate(this.OnBeginAddWorkType);
            }
            if ((this.onEndAddWorkTypeDelegate == null)) {
                this.onEndAddWorkTypeDelegate = new EndOperationDelegate(this.OnEndAddWorkType);
            }
            if ((this.onAddWorkTypeCompletedDelegate == null)) {
                this.onAddWorkTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkTypeCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkTypeDelegate, new object[] {
                        workType}, this.onEndAddWorkTypeDelegate, this.onAddWorkTypeCompletedDelegate, userState);
        }
        
        public void DeleteWorkType(int workTypeID) {
            base.Channel.DeleteWorkType(workTypeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteWorkType(int workTypeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorkType(workTypeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteWorkType(System.IAsyncResult result) {
            base.Channel.EndDeleteWorkType(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorkType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int workTypeID = ((int)(inValues[0]));
            return this.BeginDeleteWorkType(workTypeID, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorkType(System.IAsyncResult result) {
            this.EndDeleteWorkType(result);
            return null;
        }
        
        private void OnDeleteWorkTypeCompleted(object state) {
            if ((this.DeleteWorkTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkTypeAsync(int workTypeID) {
            this.DeleteWorkTypeAsync(workTypeID, null);
        }
        
        public void DeleteWorkTypeAsync(int workTypeID, object userState) {
            if ((this.onBeginDeleteWorkTypeDelegate == null)) {
                this.onBeginDeleteWorkTypeDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorkType);
            }
            if ((this.onEndDeleteWorkTypeDelegate == null)) {
                this.onEndDeleteWorkTypeDelegate = new EndOperationDelegate(this.OnEndDeleteWorkType);
            }
            if ((this.onDeleteWorkTypeCompletedDelegate == null)) {
                this.onDeleteWorkTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkTypeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkTypeDelegate, new object[] {
                        workTypeID}, this.onEndDeleteWorkTypeDelegate, this.onDeleteWorkTypeCompletedDelegate, userState);
        }
        
        public void UpdateWorkType(HA.MVVMClient.DataService.WorkType workType) {
            base.Channel.UpdateWorkType(workType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateWorkType(HA.MVVMClient.DataService.WorkType workType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWorkType(workType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateWorkType(System.IAsyncResult result) {
            base.Channel.EndUpdateWorkType(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWorkType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HA.MVVMClient.DataService.WorkType workType = ((HA.MVVMClient.DataService.WorkType)(inValues[0]));
            return this.BeginUpdateWorkType(workType, callback, asyncState);
        }
        
        private object[] OnEndUpdateWorkType(System.IAsyncResult result) {
            this.EndUpdateWorkType(result);
            return null;
        }
        
        private void OnUpdateWorkTypeCompleted(object state) {
            if ((this.UpdateWorkTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkTypeAsync(HA.MVVMClient.DataService.WorkType workType) {
            this.UpdateWorkTypeAsync(workType, null);
        }
        
        public void UpdateWorkTypeAsync(HA.MVVMClient.DataService.WorkType workType, object userState) {
            if ((this.onBeginUpdateWorkTypeDelegate == null)) {
                this.onBeginUpdateWorkTypeDelegate = new BeginOperationDelegate(this.OnBeginUpdateWorkType);
            }
            if ((this.onEndUpdateWorkTypeDelegate == null)) {
                this.onEndUpdateWorkTypeDelegate = new EndOperationDelegate(this.OnEndUpdateWorkType);
            }
            if ((this.onUpdateWorkTypeCompletedDelegate == null)) {
                this.onUpdateWorkTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkTypeCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkTypeDelegate, new object[] {
                        workType}, this.onEndUpdateWorkTypeDelegate, this.onUpdateWorkTypeCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> FindWorkTypes(int detachmentID) {
            return base.Channel.FindWorkTypes(detachmentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindWorkTypes(int detachmentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindWorkTypes(detachmentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> EndFindWorkTypes(System.IAsyncResult result) {
            return base.Channel.EndFindWorkTypes(result);
        }
        
        private System.IAsyncResult OnBeginFindWorkTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int detachmentID = ((int)(inValues[0]));
            return this.BeginFindWorkTypes(detachmentID, callback, asyncState);
        }
        
        private object[] OnEndFindWorkTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HA.MVVMClient.DataService.WorkType> retVal = this.EndFindWorkTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindWorkTypesCompleted(object state) {
            if ((this.FindWorkTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindWorkTypesCompleted(this, new FindWorkTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindWorkTypesAsync(int detachmentID) {
            this.FindWorkTypesAsync(detachmentID, null);
        }
        
        public void FindWorkTypesAsync(int detachmentID, object userState) {
            if ((this.onBeginFindWorkTypesDelegate == null)) {
                this.onBeginFindWorkTypesDelegate = new BeginOperationDelegate(this.OnBeginFindWorkTypes);
            }
            if ((this.onEndFindWorkTypesDelegate == null)) {
                this.onEndFindWorkTypesDelegate = new EndOperationDelegate(this.OnEndFindWorkTypes);
            }
            if ((this.onFindWorkTypesCompletedDelegate == null)) {
                this.onFindWorkTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindWorkTypesCompleted);
            }
            base.InvokeAsync(this.onBeginFindWorkTypesDelegate, new object[] {
                        detachmentID}, this.onEndFindWorkTypesDelegate, this.onFindWorkTypesCompletedDelegate, userState);
        }
    }
}
