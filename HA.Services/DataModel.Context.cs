//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HA.Services
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Date> Dates { get; set; }
        public virtual DbSet<Detachment> Detachments { get; set; }
        public virtual DbSet<Changeover> Changeovers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Tour> Tours { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<WorkerState> WorkerStates { get; set; }
        public virtual DbSet<Work> Works { get; set; }
        public virtual DbSet<WorkType> WorkTypes { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Months(Nullable<int> year, Nullable<int> detachmentID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var detachmentIDParameter = detachmentID.HasValue ?
                new ObjectParameter("detachmentID", detachmentID) :
                new ObjectParameter("detachmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Months", yearParameter, detachmentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Years(Nullable<int> detachmentID)
        {
            var detachmentIDParameter = detachmentID.HasValue ?
                new ObjectParameter("detachmentID", detachmentID) :
                new ObjectParameter("detachmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Years", detachmentIDParameter);
        }
    }
}
